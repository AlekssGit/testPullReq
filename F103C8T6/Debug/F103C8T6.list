
F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004310  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800441c  0800441c  0001441c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800445c  0800445c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800445c  0800445c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800445c  0800445c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800445c  0800445c  0001445c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004460  08004460  00014460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  2000000c  08004470  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08004470  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1b9  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002186  00000000  00000000  0002d1ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  0002f378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d10  00000000  00000000  000301c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017e45  00000000  00000000  00030ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c2e7  00000000  00000000  00048d15  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008af38  00000000  00000000  00054ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dff34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a2c  00000000  00000000  000dffb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004404 	.word	0x08004404

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08004404 	.word	0x08004404

0800014c <update_lcd>:
extern SPI_HandleTypeDef hspi2;

int displayed_number = -1;

void update_lcd()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(change == 1)
 8000150:	4b16      	ldr	r3, [pc, #88]	; (80001ac <update_lcd+0x60>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d118      	bne.n	800018a <update_lcd+0x3e>
	{
		change = 0;
 8000158:	4b14      	ldr	r3, [pc, #80]	; (80001ac <update_lcd+0x60>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(dig_1_GPIO_Port, dig_1_Pin, GPIO_PIN_RESET);
 800015e:	2200      	movs	r2, #0
 8000160:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000164:	4812      	ldr	r0, [pc, #72]	; (80001b0 <update_lcd+0x64>)
 8000166:	f002 fa3c 	bl	80025e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(dig_2_GPIO_Port, dig_2_Pin, GPIO_PIN_RESET);
 800016a:	2200      	movs	r2, #0
 800016c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000170:	480f      	ldr	r0, [pc, #60]	; (80001b0 <update_lcd+0x64>)
 8000172:	f002 fa36 	bl	80025e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(dig_3_GPIO_Port, dig_3_Pin, GPIO_PIN_RESET);
 8000176:	2200      	movs	r2, #0
 8000178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800017c:	480c      	ldr	r0, [pc, #48]	; (80001b0 <update_lcd+0x64>)
 800017e:	f002 fa30 	bl	80025e2 <HAL_GPIO_WritePin>

		HAL_Delay(500);
 8000182:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000186:	f001 f94f 	bl	8001428 <HAL_Delay>
	}

//	change = 0;

	if(val == 1)
 800018a:	4b0a      	ldr	r3, [pc, #40]	; (80001b4 <update_lcd+0x68>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b01      	cmp	r3, #1
 8000190:	d105      	bne.n	800019e <update_lcd+0x52>
	{
		print_number(U_AB);
 8000192:	4b09      	ldr	r3, [pc, #36]	; (80001b8 <update_lcd+0x6c>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f812 	bl	80001c0 <print_number>
	{
		print_number(U_ac_dc);
//		print_number(565);
//		print_number(temperature);
	}
}
 800019c:	e004      	b.n	80001a8 <update_lcd+0x5c>
		print_number(U_ac_dc);
 800019e:	4b07      	ldr	r3, [pc, #28]	; (80001bc <update_lcd+0x70>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4618      	mov	r0, r3
 80001a4:	f000 f80c 	bl	80001c0 <print_number>
}
 80001a8:	bf00      	nop
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	20000030 	.word	0x20000030
 80001b0:	40010c00 	.word	0x40010c00
 80001b4:	20000120 	.word	0x20000120
 80001b8:	20000168 	.word	0x20000168
 80001bc:	20000094 	.word	0x20000094

080001c0 <print_number>:


void print_number(int number)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
	if(number < 10)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2b09      	cmp	r3, #9
 80001cc:	dc12      	bgt.n	80001f4 <print_number+0x34>
	{
		print_digit(2, 0, 1);
 80001ce:	2201      	movs	r2, #1
 80001d0:	2100      	movs	r1, #0
 80001d2:	2002      	movs	r0, #2
 80001d4:	f000 f88c 	bl	80002f0 <print_digit>
		HAL_Delay(1);
 80001d8:	2001      	movs	r0, #1
 80001da:	f001 f925 	bl	8001428 <HAL_Delay>
		print_digit(3, number, 0);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	b21b      	sxth	r3, r3
 80001e2:	2200      	movs	r2, #0
 80001e4:	4619      	mov	r1, r3
 80001e6:	2003      	movs	r0, #3
 80001e8:	f000 f882 	bl	80002f0 <print_digit>
		HAL_Delay(1);
 80001ec:	2001      	movs	r0, #1
 80001ee:	f001 f91b 	bl	8001428 <HAL_Delay>
		print_digit(2, (number % 100) / 10, 1);
		HAL_Delay(1);
		print_digit(3, (number % 100) % 10, 0);
		HAL_Delay(1);
	}
}
 80001f2:	e075      	b.n	80002e0 <print_number+0x120>
	else if(number < 100)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2b63      	cmp	r3, #99	; 0x63
 80001f8:	dc25      	bgt.n	8000246 <print_number+0x86>
		print_digit(2, number/10, 1);
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a3a      	ldr	r2, [pc, #232]	; (80002e8 <print_number+0x128>)
 80001fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000202:	1092      	asrs	r2, r2, #2
 8000204:	17db      	asrs	r3, r3, #31
 8000206:	1ad3      	subs	r3, r2, r3
 8000208:	b21b      	sxth	r3, r3
 800020a:	2201      	movs	r2, #1
 800020c:	4619      	mov	r1, r3
 800020e:	2002      	movs	r0, #2
 8000210:	f000 f86e 	bl	80002f0 <print_digit>
		HAL_Delay(1);
 8000214:	2001      	movs	r0, #1
 8000216:	f001 f907 	bl	8001428 <HAL_Delay>
		print_digit(3, number % 10, 0);
 800021a:	687a      	ldr	r2, [r7, #4]
 800021c:	4b32      	ldr	r3, [pc, #200]	; (80002e8 <print_number+0x128>)
 800021e:	fb83 1302 	smull	r1, r3, r3, r2
 8000222:	1099      	asrs	r1, r3, #2
 8000224:	17d3      	asrs	r3, r2, #31
 8000226:	1ac9      	subs	r1, r1, r3
 8000228:	460b      	mov	r3, r1
 800022a:	009b      	lsls	r3, r3, #2
 800022c:	440b      	add	r3, r1
 800022e:	005b      	lsls	r3, r3, #1
 8000230:	1ad1      	subs	r1, r2, r3
 8000232:	b20b      	sxth	r3, r1
 8000234:	2200      	movs	r2, #0
 8000236:	4619      	mov	r1, r3
 8000238:	2003      	movs	r0, #3
 800023a:	f000 f859 	bl	80002f0 <print_digit>
		HAL_Delay(1);
 800023e:	2001      	movs	r0, #1
 8000240:	f001 f8f2 	bl	8001428 <HAL_Delay>
}
 8000244:	e04c      	b.n	80002e0 <print_number+0x120>
	else if(number < 1000)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800024c:	da48      	bge.n	80002e0 <print_number+0x120>
		print_digit(1, number / 100, 0);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4a26      	ldr	r2, [pc, #152]	; (80002ec <print_number+0x12c>)
 8000252:	fb82 1203 	smull	r1, r2, r2, r3
 8000256:	1152      	asrs	r2, r2, #5
 8000258:	17db      	asrs	r3, r3, #31
 800025a:	1ad3      	subs	r3, r2, r3
 800025c:	b21b      	sxth	r3, r3
 800025e:	2200      	movs	r2, #0
 8000260:	4619      	mov	r1, r3
 8000262:	2001      	movs	r0, #1
 8000264:	f000 f844 	bl	80002f0 <print_digit>
		HAL_Delay(1);
 8000268:	2001      	movs	r0, #1
 800026a:	f001 f8dd 	bl	8001428 <HAL_Delay>
		print_digit(2, (number % 100) / 10, 1);
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	4b1e      	ldr	r3, [pc, #120]	; (80002ec <print_number+0x12c>)
 8000272:	fb83 1302 	smull	r1, r3, r3, r2
 8000276:	1159      	asrs	r1, r3, #5
 8000278:	17d3      	asrs	r3, r2, #31
 800027a:	1acb      	subs	r3, r1, r3
 800027c:	2164      	movs	r1, #100	; 0x64
 800027e:	fb01 f303 	mul.w	r3, r1, r3
 8000282:	1ad3      	subs	r3, r2, r3
 8000284:	4a18      	ldr	r2, [pc, #96]	; (80002e8 <print_number+0x128>)
 8000286:	fb82 1203 	smull	r1, r2, r2, r3
 800028a:	1092      	asrs	r2, r2, #2
 800028c:	17db      	asrs	r3, r3, #31
 800028e:	1ad3      	subs	r3, r2, r3
 8000290:	b21b      	sxth	r3, r3
 8000292:	2201      	movs	r2, #1
 8000294:	4619      	mov	r1, r3
 8000296:	2002      	movs	r0, #2
 8000298:	f000 f82a 	bl	80002f0 <print_digit>
		HAL_Delay(1);
 800029c:	2001      	movs	r0, #1
 800029e:	f001 f8c3 	bl	8001428 <HAL_Delay>
		print_digit(3, (number % 100) % 10, 0);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a11      	ldr	r2, [pc, #68]	; (80002ec <print_number+0x12c>)
 80002a6:	fb82 1203 	smull	r1, r2, r2, r3
 80002aa:	1151      	asrs	r1, r2, #5
 80002ac:	17da      	asrs	r2, r3, #31
 80002ae:	1a8a      	subs	r2, r1, r2
 80002b0:	2164      	movs	r1, #100	; 0x64
 80002b2:	fb01 f202 	mul.w	r2, r1, r2
 80002b6:	1a9a      	subs	r2, r3, r2
 80002b8:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <print_number+0x128>)
 80002ba:	fb83 1302 	smull	r1, r3, r3, r2
 80002be:	1099      	asrs	r1, r3, #2
 80002c0:	17d3      	asrs	r3, r2, #31
 80002c2:	1ac9      	subs	r1, r1, r3
 80002c4:	460b      	mov	r3, r1
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	440b      	add	r3, r1
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	1ad1      	subs	r1, r2, r3
 80002ce:	b20b      	sxth	r3, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	4619      	mov	r1, r3
 80002d4:	2003      	movs	r0, #3
 80002d6:	f000 f80b 	bl	80002f0 <print_digit>
		HAL_Delay(1);
 80002da:	2001      	movs	r0, #1
 80002dc:	f001 f8a4 	bl	8001428 <HAL_Delay>
}
 80002e0:	bf00      	nop
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	66666667 	.word	0x66666667
 80002ec:	51eb851f 	.word	0x51eb851f

080002f0 <print_digit>:

void print_digit(int dig, short int number, short int dp)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	460b      	mov	r3, r1
 80002fa:	807b      	strh	r3, [r7, #2]
 80002fc:	4613      	mov	r3, r2
 80002fe:	803b      	strh	r3, [r7, #0]
	switch(dig)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2b02      	cmp	r3, #2
 8000304:	d010      	beq.n	8000328 <print_digit+0x38>
 8000306:	2b03      	cmp	r3, #3
 8000308:	d021      	beq.n	800034e <print_digit+0x5e>
 800030a:	2b01      	cmp	r3, #1
 800030c:	d132      	bne.n	8000374 <print_digit+0x84>
	{
	case 1:
			HAL_GPIO_WritePin(dig_3_GPIO_Port, dig_3_Pin, GPIO_PIN_RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000314:	4826      	ldr	r0, [pc, #152]	; (80003b0 <print_digit+0xc0>)
 8000316:	f002 f964 	bl	80025e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dig_1_GPIO_Port, dig_1_Pin, GPIO_PIN_SET);
 800031a:	2201      	movs	r2, #1
 800031c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000320:	4823      	ldr	r0, [pc, #140]	; (80003b0 <print_digit+0xc0>)
 8000322:	f002 f95e 	bl	80025e2 <HAL_GPIO_WritePin>
			break;
 8000326:	e025      	b.n	8000374 <print_digit+0x84>
	case 2:
			HAL_GPIO_WritePin(dig_3_GPIO_Port, dig_3_Pin, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032e:	4820      	ldr	r0, [pc, #128]	; (80003b0 <print_digit+0xc0>)
 8000330:	f002 f957 	bl	80025e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dig_1_GPIO_Port, dig_1_Pin, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800033a:	481d      	ldr	r0, [pc, #116]	; (80003b0 <print_digit+0xc0>)
 800033c:	f002 f951 	bl	80025e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dig_2_GPIO_Port, dig_2_Pin, GPIO_PIN_SET);
 8000340:	2201      	movs	r2, #1
 8000342:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000346:	481a      	ldr	r0, [pc, #104]	; (80003b0 <print_digit+0xc0>)
 8000348:	f002 f94b 	bl	80025e2 <HAL_GPIO_WritePin>
			break;
 800034c:	e012      	b.n	8000374 <print_digit+0x84>
	case 3:
			HAL_GPIO_WritePin(dig_1_GPIO_Port, dig_1_Pin, GPIO_PIN_RESET);
 800034e:	2200      	movs	r2, #0
 8000350:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000354:	4816      	ldr	r0, [pc, #88]	; (80003b0 <print_digit+0xc0>)
 8000356:	f002 f944 	bl	80025e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dig_2_GPIO_Port, dig_2_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000360:	4813      	ldr	r0, [pc, #76]	; (80003b0 <print_digit+0xc0>)
 8000362:	f002 f93e 	bl	80025e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dig_3_GPIO_Port, dig_3_Pin, GPIO_PIN_SET);
 8000366:	2201      	movs	r2, #1
 8000368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800036c:	4810      	ldr	r0, [pc, #64]	; (80003b0 <print_digit+0xc0>)
 800036e:	f002 f938 	bl	80025e2 <HAL_GPIO_WritePin>
			break;
 8000372:	bf00      	nop
	}

	uint8_t aTxBuffer[1] = {0};
 8000374:	2300      	movs	r3, #0
 8000376:	733b      	strb	r3, [r7, #12]
	aTxBuffer[0] = prepare_number(number);
 8000378:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f81b 	bl	80003b8 <prepare_number>
 8000382:	4603      	mov	r3, r0
 8000384:	733b      	strb	r3, [r7, #12]

	if(dp) aTxBuffer[0] &= DP;
 8000386:	f9b7 3000 	ldrsh.w	r3, [r7]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d004      	beq.n	8000398 <print_digit+0xa8>
 800038e:	7b3b      	ldrb	r3, [r7, #12]
 8000390:	f023 0302 	bic.w	r3, r3, #2
 8000394:	b2db      	uxtb	r3, r3
 8000396:	733b      	strb	r3, [r7, #12]

	HAL_SPI_Transmit(&hspi2, (uint8_t*)aTxBuffer, 1, 0);
 8000398:	f107 010c 	add.w	r1, r7, #12
 800039c:	2300      	movs	r3, #0
 800039e:	2201      	movs	r2, #1
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <print_digit+0xc4>)
 80003a2:	f002 ff35 	bl	8003210 <HAL_SPI_Transmit>
}
 80003a6:	bf00      	nop
 80003a8:	3710      	adds	r7, #16
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40010c00 	.word	0x40010c00
 80003b4:	2000003c 	.word	0x2000003c

080003b8 <prepare_number>:

uint8_t prepare_number(short int number)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	80fb      	strh	r3, [r7, #6]
	uint8_t res;
	switch(number)
 80003c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003c6:	2b09      	cmp	r3, #9
 80003c8:	d834      	bhi.n	8000434 <prepare_number+0x7c>
 80003ca:	a201      	add	r2, pc, #4	; (adr r2, 80003d0 <prepare_number+0x18>)
 80003cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d0:	080003f9 	.word	0x080003f9
 80003d4:	080003ff 	.word	0x080003ff
 80003d8:	08000405 	.word	0x08000405
 80003dc:	0800040b 	.word	0x0800040b
 80003e0:	08000411 	.word	0x08000411
 80003e4:	08000417 	.word	0x08000417
 80003e8:	0800041d 	.word	0x0800041d
 80003ec:	08000423 	.word	0x08000423
 80003f0:	08000429 	.word	0x08000429
 80003f4:	0800042f 	.word	0x0800042f
	{
	case 0: res = 0x0A; break;
 80003f8:	230a      	movs	r3, #10
 80003fa:	73fb      	strb	r3, [r7, #15]
 80003fc:	e01a      	b.n	8000434 <prepare_number+0x7c>
	case 1: res = 0xEB; break;
 80003fe:	23eb      	movs	r3, #235	; 0xeb
 8000400:	73fb      	strb	r3, [r7, #15]
 8000402:	e017      	b.n	8000434 <prepare_number+0x7c>
	case 2: res = 0x26; break;
 8000404:	2326      	movs	r3, #38	; 0x26
 8000406:	73fb      	strb	r3, [r7, #15]
 8000408:	e014      	b.n	8000434 <prepare_number+0x7c>
	case 3: res = 0xA2; break;
 800040a:	23a2      	movs	r3, #162	; 0xa2
 800040c:	73fb      	strb	r3, [r7, #15]
 800040e:	e011      	b.n	8000434 <prepare_number+0x7c>
	case 4: res = 0xC3; break;
 8000410:	23c3      	movs	r3, #195	; 0xc3
 8000412:	73fb      	strb	r3, [r7, #15]
 8000414:	e00e      	b.n	8000434 <prepare_number+0x7c>
	case 5: res = 0x92; break;
 8000416:	2392      	movs	r3, #146	; 0x92
 8000418:	73fb      	strb	r3, [r7, #15]
 800041a:	e00b      	b.n	8000434 <prepare_number+0x7c>
	case 6: res = 0x12; break;
 800041c:	2312      	movs	r3, #18
 800041e:	73fb      	strb	r3, [r7, #15]
 8000420:	e008      	b.n	8000434 <prepare_number+0x7c>
	case 7: res = 0xAB; break;
 8000422:	23ab      	movs	r3, #171	; 0xab
 8000424:	73fb      	strb	r3, [r7, #15]
 8000426:	e005      	b.n	8000434 <prepare_number+0x7c>
	case 8: res = 0x02; break;
 8000428:	2302      	movs	r3, #2
 800042a:	73fb      	strb	r3, [r7, #15]
 800042c:	e002      	b.n	8000434 <prepare_number+0x7c>
	case 9: res = 0x82; break;
 800042e:	2382      	movs	r3, #130	; 0x82
 8000430:	73fb      	strb	r3, [r7, #15]
 8000432:	bf00      	nop
	}
	return res;
 8000434:	7bfb      	ldrb	r3, [r7, #15]
}
 8000436:	4618      	mov	r0, r3
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	if(fl == 0)
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <HAL_ADC_ConvCpltCallback+0x24>)
 800044a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d102      	bne.n	8000458 <HAL_ADC_ConvCpltCallback+0x18>
	{
		fl = 1;
 8000452:	4b04      	ldr	r3, [pc, #16]	; (8000464 <HAL_ADC_ConvCpltCallback+0x24>)
 8000454:	2201      	movs	r2, #1
 8000456:	801a      	strh	r2, [r3, #0]
	}
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	200000ec 	.word	0x200000ec

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046e:	f000 ff79 	bl	8001364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000472:	f000 f9eb 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000476:	f000 fbad 	bl	8000bd4 <MX_GPIO_Init>
  MX_DMA_Init();
 800047a:	f000 fb8d 	bl	8000b98 <MX_DMA_Init>
  MX_ADC1_Init();
 800047e:	f000 fa41 	bl	8000904 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000482:	f000 faa9 	bl	80009d8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000486:	f000 fadd 	bl	8000a44 <MX_TIM1_Init>
  MX_TIM4_Init();
 800048a:	f000 fb2d 	bl	8000ae8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 800048e:	48b2      	ldr	r0, [pc, #712]	; (8000758 <main+0x2f0>)
 8000490:	f001 fb9e 	bl	8001bd0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_1, 4);
 8000494:	2204      	movs	r2, #4
 8000496:	49b1      	ldr	r1, [pc, #708]	; (800075c <main+0x2f4>)
 8000498:	48af      	ldr	r0, [pc, #700]	; (8000758 <main+0x2f0>)
 800049a:	f001 f8bf 	bl	800161c <HAL_ADC_Start_DMA>
  HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4);
 800049e:	210c      	movs	r1, #12
 80004a0:	48af      	ldr	r0, [pc, #700]	; (8000760 <main+0x2f8>)
 80004a2:	f003 f989 	bl	80037b8 <HAL_TIM_OC_Start>

  U_AB = 0;
 80004a6:	4baf      	ldr	r3, [pc, #700]	; (8000764 <main+0x2fc>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
  U_ac_dc = 0;
 80004ac:	4bae      	ldr	r3, [pc, #696]	; (8000768 <main+0x300>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
  temperature = 0;
 80004b2:	4bae      	ldr	r3, [pc, #696]	; (800076c <main+0x304>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim1);
 80004b8:	48ad      	ldr	r0, [pc, #692]	; (8000770 <main+0x308>)
 80004ba:	f003 f8db 	bl	8003674 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOB, MR_LCD_Pin, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2104      	movs	r1, #4
 80004c2:	48ac      	ldr	r0, [pc, #688]	; (8000774 <main+0x30c>)
 80004c4:	f002 f88d 	bl	80025e2 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(U_AB_GPIO_Port, U_AB_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ce:	48aa      	ldr	r0, [pc, #680]	; (8000778 <main+0x310>)
 80004d0:	f002 f887 	bl	80025e2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(U_ac_dc_GPIO_Port, U_ac_dc_Pin, GPIO_PIN_SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004da:	48a7      	ldr	r0, [pc, #668]	; (8000778 <main+0x310>)
 80004dc:	f002 f881 	bl	80025e2 <HAL_GPIO_WritePin>

  int test_btn = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	607b      	str	r3, [r7, #4]

  val = 0;
 80004e4:	4ba5      	ldr	r3, [pc, #660]	; (800077c <main+0x314>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]

  counter_steps = 0;
 80004ea:	4ba5      	ldr	r3, [pc, #660]	; (8000780 <main+0x318>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
  fl = 0;
 80004f0:	4ba4      	ldr	r3, [pc, #656]	; (8000784 <main+0x31c>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	801a      	strh	r2, [r3, #0]

  init_filtr();
 80004f6:	f000 fc37 	bl	8000d68 <init_filtr>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(getState())
 80004fa:	f000 fc8f 	bl	8000e1c <getState>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d002      	beq.n	800050a <main+0xa2>
 8000504:	2b01      	cmp	r3, #1
 8000506:	d038      	beq.n	800057a <main+0x112>
 8000508:	e0e8      	b.n	80006dc <main+0x274>
	  {
	  case WORK_IBP:
		  if((filtr_U_ac_dc == U_0) | (filtr_U_AB > U_29) | (filtr_U_AB < U_24) | (filtr_I_shunt > I_20) | (filtr_temperature > TEMP_55_ADC))
 800050a:	4b9f      	ldr	r3, [pc, #636]	; (8000788 <main+0x320>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	bf0c      	ite	eq
 8000512:	2301      	moveq	r3, #1
 8000514:	2300      	movne	r3, #0
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b9c      	ldr	r3, [pc, #624]	; (800078c <main+0x324>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f640 5114 	movw	r1, #3348	; 0xd14
 8000520:	428b      	cmp	r3, r1
 8000522:	bf8c      	ite	hi
 8000524:	2301      	movhi	r3, #1
 8000526:	2300      	movls	r3, #0
 8000528:	b2db      	uxtb	r3, r3
 800052a:	4313      	orrs	r3, r2
 800052c:	b2db      	uxtb	r3, r3
 800052e:	4619      	mov	r1, r3
 8000530:	4b96      	ldr	r3, [pc, #600]	; (800078c <main+0x324>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f640 22d2 	movw	r2, #2770	; 0xad2
 8000538:	4293      	cmp	r3, r2
 800053a:	bf94      	ite	ls
 800053c:	2301      	movls	r3, #1
 800053e:	2300      	movhi	r3, #0
 8000540:	b2db      	uxtb	r3, r3
 8000542:	430b      	orrs	r3, r1
 8000544:	4a92      	ldr	r2, [pc, #584]	; (8000790 <main+0x328>)
 8000546:	6812      	ldr	r2, [r2, #0]
 8000548:	f640 11b2 	movw	r1, #2482	; 0x9b2
 800054c:	428a      	cmp	r2, r1
 800054e:	bf8c      	ite	hi
 8000550:	2201      	movhi	r2, #1
 8000552:	2200      	movls	r2, #0
 8000554:	b2d2      	uxtb	r2, r2
 8000556:	4313      	orrs	r3, r2
 8000558:	4a8e      	ldr	r2, [pc, #568]	; (8000794 <main+0x32c>)
 800055a:	6812      	ldr	r2, [r2, #0]
 800055c:	f640 71e9 	movw	r1, #4073	; 0xfe9
 8000560:	428a      	cmp	r2, r1
 8000562:	bf8c      	ite	hi
 8000564:	2201      	movhi	r2, #1
 8000566:	2200      	movls	r2, #0
 8000568:	b2d2      	uxtb	r2, r2
 800056a:	4313      	orrs	r3, r2
 800056c:	2b00      	cmp	r3, #0
 800056e:	f000 80b4 	beq.w	80006da <main+0x272>
			  setState(ERROR_IBP);
 8000572:	2001      	movs	r0, #1
 8000574:	f000 fc5c 	bl	8000e30 <setState>
		  break;
 8000578:	e0af      	b.n	80006da <main+0x272>
	  case ERROR_IBP:
		  if((filtr_U_ac_dc == U_0) | (filtr_U_AB > U_29) | (filtr_U_AB < U_24) | (filtr_I_shunt > I_20) | (filtr_temperature > TEMP_55_ADC))
 800057a:	4b83      	ldr	r3, [pc, #524]	; (8000788 <main+0x320>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	bf0c      	ite	eq
 8000582:	2301      	moveq	r3, #1
 8000584:	2300      	movne	r3, #0
 8000586:	b2da      	uxtb	r2, r3
 8000588:	4b80      	ldr	r3, [pc, #512]	; (800078c <main+0x324>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f640 5114 	movw	r1, #3348	; 0xd14
 8000590:	428b      	cmp	r3, r1
 8000592:	bf8c      	ite	hi
 8000594:	2301      	movhi	r3, #1
 8000596:	2300      	movls	r3, #0
 8000598:	b2db      	uxtb	r3, r3
 800059a:	4313      	orrs	r3, r2
 800059c:	b2db      	uxtb	r3, r3
 800059e:	4619      	mov	r1, r3
 80005a0:	4b7a      	ldr	r3, [pc, #488]	; (800078c <main+0x324>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f640 22d2 	movw	r2, #2770	; 0xad2
 80005a8:	4293      	cmp	r3, r2
 80005aa:	bf94      	ite	ls
 80005ac:	2301      	movls	r3, #1
 80005ae:	2300      	movhi	r3, #0
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	430b      	orrs	r3, r1
 80005b4:	4a76      	ldr	r2, [pc, #472]	; (8000790 <main+0x328>)
 80005b6:	6812      	ldr	r2, [r2, #0]
 80005b8:	f640 11b2 	movw	r1, #2482	; 0x9b2
 80005bc:	428a      	cmp	r2, r1
 80005be:	bf8c      	ite	hi
 80005c0:	2201      	movhi	r2, #1
 80005c2:	2200      	movls	r2, #0
 80005c4:	b2d2      	uxtb	r2, r2
 80005c6:	4313      	orrs	r3, r2
 80005c8:	4a72      	ldr	r2, [pc, #456]	; (8000794 <main+0x32c>)
 80005ca:	6812      	ldr	r2, [r2, #0]
 80005cc:	f640 71e9 	movw	r1, #4073	; 0xfe9
 80005d0:	428a      	cmp	r2, r1
 80005d2:	bf8c      	ite	hi
 80005d4:	2201      	movhi	r2, #1
 80005d6:	2200      	movls	r2, #0
 80005d8:	b2d2      	uxtb	r2, r2
 80005da:	4313      	orrs	r3, r2
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d05b      	beq.n	8000698 <main+0x230>
		  {
//			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
			if(filtr_U_ac_dc == U_0)
 80005e0:	4b69      	ldr	r3, [pc, #420]	; (8000788 <main+0x320>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d106      	bne.n	80005f6 <main+0x18e>
			{
				HAL_GPIO_WritePin(U_ac_dc_0_GPIO_Port, U_ac_dc_0_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ee:	4862      	ldr	r0, [pc, #392]	; (8000778 <main+0x310>)
 80005f0:	f001 fff7 	bl	80025e2 <HAL_GPIO_WritePin>
 80005f4:	e005      	b.n	8000602 <main+0x19a>
			}
			else
			{
				HAL_GPIO_WritePin(U_ac_dc_0_GPIO_Port, U_ac_dc_0_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fc:	485e      	ldr	r0, [pc, #376]	; (8000778 <main+0x310>)
 80005fe:	f001 fff0 	bl	80025e2 <HAL_GPIO_WritePin>
			}

			if(filtr_U_AB > U_29)
 8000602:	4b62      	ldr	r3, [pc, #392]	; (800078c <main+0x324>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f640 5214 	movw	r2, #3348	; 0xd14
 800060a:	4293      	cmp	r3, r2
 800060c:	d906      	bls.n	800061c <main+0x1b4>
			{
				HAL_GPIO_WritePin(U_AB_29_GPIO_Port, U_AB_29_Pin, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000614:	4858      	ldr	r0, [pc, #352]	; (8000778 <main+0x310>)
 8000616:	f001 ffe4 	bl	80025e2 <HAL_GPIO_WritePin>
 800061a:	e005      	b.n	8000628 <main+0x1c0>
			}
			else
			{
				HAL_GPIO_WritePin(U_AB_29_GPIO_Port, U_AB_29_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000622:	4855      	ldr	r0, [pc, #340]	; (8000778 <main+0x310>)
 8000624:	f001 ffdd 	bl	80025e2 <HAL_GPIO_WritePin>
			}

			if(filtr_U_AB < U_24)
 8000628:	4b58      	ldr	r3, [pc, #352]	; (800078c <main+0x324>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f640 22d2 	movw	r2, #2770	; 0xad2
 8000630:	4293      	cmp	r3, r2
 8000632:	d806      	bhi.n	8000642 <main+0x1da>
			{
				HAL_GPIO_WritePin(U_AB_24_GPIO_Port, U_AB_24_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800063a:	484f      	ldr	r0, [pc, #316]	; (8000778 <main+0x310>)
 800063c:	f001 ffd1 	bl	80025e2 <HAL_GPIO_WritePin>
 8000640:	e005      	b.n	800064e <main+0x1e6>
			}
			else
			{
				HAL_GPIO_WritePin(U_AB_24_GPIO_Port, U_AB_24_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000648:	484b      	ldr	r0, [pc, #300]	; (8000778 <main+0x310>)
 800064a:	f001 ffca 	bl	80025e2 <HAL_GPIO_WritePin>
			}

			if(filtr_I_shunt > I_20)
 800064e:	4b50      	ldr	r3, [pc, #320]	; (8000790 <main+0x328>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8000656:	4293      	cmp	r3, r2
 8000658:	d905      	bls.n	8000666 <main+0x1fe>
			{
				HAL_GPIO_WritePin(I_mor_20_GPIO_Port, I_mor_20_Pin, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	2108      	movs	r1, #8
 800065e:	4845      	ldr	r0, [pc, #276]	; (8000774 <main+0x30c>)
 8000660:	f001 ffbf 	bl	80025e2 <HAL_GPIO_WritePin>
 8000664:	e004      	b.n	8000670 <main+0x208>
			}
			else
			{
				HAL_GPIO_WritePin(I_mor_20_GPIO_Port, I_mor_20_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2108      	movs	r1, #8
 800066a:	4842      	ldr	r0, [pc, #264]	; (8000774 <main+0x30c>)
 800066c:	f001 ffb9 	bl	80025e2 <HAL_GPIO_WritePin>
			}

			if(filtr_temperature > TEMP_55_ADC)
 8000670:	4b48      	ldr	r3, [pc, #288]	; (8000794 <main+0x32c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f640 72e9 	movw	r2, #4073	; 0xfe9
 8000678:	4293      	cmp	r3, r2
 800067a:	d906      	bls.n	800068a <main+0x222>
			{
				HAL_GPIO_WritePin(T_high_GPIO_Port, T_high_Pin, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000682:	483d      	ldr	r0, [pc, #244]	; (8000778 <main+0x310>)
 8000684:	f001 ffad 	bl	80025e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(T_high_GPIO_Port, T_high_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(I_mor_20_GPIO_Port, I_mor_20_Pin, GPIO_PIN_RESET);

			setState(WORK_IBP);
		  }
		  break;
 8000688:	e028      	b.n	80006dc <main+0x274>
				HAL_GPIO_WritePin(T_high_GPIO_Port, T_high_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000690:	4839      	ldr	r0, [pc, #228]	; (8000778 <main+0x310>)
 8000692:	f001 ffa6 	bl	80025e2 <HAL_GPIO_WritePin>
		  break;
 8000696:	e021      	b.n	80006dc <main+0x274>
			  HAL_GPIO_WritePin(U_AB_29_GPIO_Port, U_AB_29_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800069e:	4836      	ldr	r0, [pc, #216]	; (8000778 <main+0x310>)
 80006a0:	f001 ff9f 	bl	80025e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(U_AB_24_GPIO_Port, U_AB_24_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006aa:	4833      	ldr	r0, [pc, #204]	; (8000778 <main+0x310>)
 80006ac:	f001 ff99 	bl	80025e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(U_ac_dc_0_GPIO_Port, U_ac_dc_0_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b6:	4830      	ldr	r0, [pc, #192]	; (8000778 <main+0x310>)
 80006b8:	f001 ff93 	bl	80025e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(T_high_GPIO_Port, T_high_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c2:	482d      	ldr	r0, [pc, #180]	; (8000778 <main+0x310>)
 80006c4:	f001 ff8d 	bl	80025e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(I_mor_20_GPIO_Port, I_mor_20_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2108      	movs	r1, #8
 80006cc:	4829      	ldr	r0, [pc, #164]	; (8000774 <main+0x30c>)
 80006ce:	f001 ff88 	bl	80025e2 <HAL_GPIO_WritePin>
			setState(WORK_IBP);
 80006d2:	2000      	movs	r0, #0
 80006d4:	f000 fbac 	bl	8000e30 <setState>
		  break;
 80006d8:	e000      	b.n	80006dc <main+0x274>
		  break;
 80006da:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Как только приняли данные по ДМА от АЦП, сразу отфильтруем их и пересчитаем значения
	  if(fl == 1)
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <main+0x31c>)
 80006de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d106      	bne.n	80006f4 <main+0x28c>
	  {
		  mean_vals();
 80006e6:	f000 fb59 	bl	8000d9c <mean_vals>
		  measure_data();
 80006ea:	f000 fae9 	bl	8000cc0 <measure_data>
		  fl = 0;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <main+0x31c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	801a      	strh	r2, [r3, #0]
	  }

	  //Чтение нажатия кнопки
	  //Если кнопка нажата, то зажигаем все светодиоды и сигналку
	  if(!HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin))
 80006f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f8:	481e      	ldr	r0, [pc, #120]	; (8000774 <main+0x30c>)
 80006fa:	f001 ff5b 	bl	80025b4 <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d10c      	bne.n	800071e <main+0x2b6>
	  {
		  test_btn = 1;
 8000704:	2301      	movs	r3, #1
 8000706:	607b      	str	r3, [r7, #4]

		  all_leds_on();
 8000708:	f000 fd66 	bl	80011d8 <all_leds_on>
		  all_segments_on();
 800070c:	f000 fdc8 	bl	80012a0 <all_segments_on>

		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4817      	ldr	r0, [pc, #92]	; (8000774 <main+0x30c>)
 8000718:	f001 ff63 	bl	80025e2 <HAL_GPIO_WritePin>
 800071c:	e6ed      	b.n	80004fa <main+0x92>
	  }
	  else
	  {
		  if(test_btn == 1)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d14e      	bne.n	80007c2 <main+0x35a>
		  {
			  test_btn = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]

			  all_leds_off();
 8000728:	f000 fd88 	bl	800123c <all_leds_off>
			  all_segments_off();
 800072c:	f000 fdd6 	bl	80012dc <all_segments_off>

			  if(val == 1 )
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <main+0x314>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d12f      	bne.n	8000798 <main+0x330>
			  {
				  HAL_GPIO_WritePin(U_AB_GPIO_Port, U_AB_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073e:	480e      	ldr	r0, [pc, #56]	; (8000778 <main+0x310>)
 8000740:	f001 ff4f 	bl	80025e2 <HAL_GPIO_WritePin>
				  HAL_Delay(1);
 8000744:	2001      	movs	r0, #1
 8000746:	f000 fe6f 	bl	8001428 <HAL_Delay>
				  HAL_GPIO_WritePin(U_ac_dc_GPIO_Port, U_ac_dc_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000750:	4809      	ldr	r0, [pc, #36]	; (8000778 <main+0x310>)
 8000752:	f001 ff46 	bl	80025e2 <HAL_GPIO_WritePin>
 8000756:	e02e      	b.n	80007b6 <main+0x34e>
 8000758:	200000f0 	.word	0x200000f0
 800075c:	20000028 	.word	0x20000028
 8000760:	20000098 	.word	0x20000098
 8000764:	20000168 	.word	0x20000168
 8000768:	20000094 	.word	0x20000094
 800076c:	200000e8 	.word	0x200000e8
 8000770:	2000016c 	.word	0x2000016c
 8000774:	40010c00 	.word	0x40010c00
 8000778:	40010800 	.word	0x40010800
 800077c:	20000120 	.word	0x20000120
 8000780:	200000e4 	.word	0x200000e4
 8000784:	200000ec 	.word	0x200000ec
 8000788:	200001c0 	.word	0x200001c0
 800078c:	200001b4 	.word	0x200001b4
 8000790:	200001bc 	.word	0x200001bc
 8000794:	200001b8 	.word	0x200001b8
			  }
			  else
			  {
				  HAL_GPIO_WritePin(U_AB_GPIO_Port, U_AB_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079e:	4825      	ldr	r0, [pc, #148]	; (8000834 <main+0x3cc>)
 80007a0:	f001 ff1f 	bl	80025e2 <HAL_GPIO_WritePin>
				  HAL_Delay(1);
 80007a4:	2001      	movs	r0, #1
 80007a6:	f000 fe3f 	bl	8001428 <HAL_Delay>
				  HAL_GPIO_WritePin(U_ac_dc_GPIO_Port, U_ac_dc_Pin, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b0:	4820      	ldr	r0, [pc, #128]	; (8000834 <main+0x3cc>)
 80007b2:	f001 ff16 	bl	80025e2 <HAL_GPIO_WritePin>
			  }
			  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007bc:	481e      	ldr	r0, [pc, #120]	; (8000838 <main+0x3d0>)
 80007be:	f001 ff10 	bl	80025e2 <HAL_GPIO_WritePin>
		  }
		  if(main_counter % 2  == 0)
		  {
//	  			  measure_data();
		  }
		  if(main_counter % 10  == 0)
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <main+0x3d4>)
 80007c4:	6819      	ldr	r1, [r3, #0]
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <main+0x3d8>)
 80007c8:	fb83 2301 	smull	r2, r3, r3, r1
 80007cc:	109a      	asrs	r2, r3, #2
 80007ce:	17cb      	asrs	r3, r1, #31
 80007d0:	1ad2      	subs	r2, r2, r3
 80007d2:	4613      	mov	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4413      	add	r3, r2
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	1aca      	subs	r2, r1, r3
 80007dc:	2a00      	cmp	r2, #0
 80007de:	d125      	bne.n	800082c <main+0x3c4>
		  {
			  change = 1;
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <main+0x3dc>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	601a      	str	r2, [r3, #0]
			  val = val ^ 1;
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <main+0x3e0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f083 0301 	eor.w	r3, r3, #1
 80007ee:	4a16      	ldr	r2, [pc, #88]	; (8000848 <main+0x3e0>)
 80007f0:	6013      	str	r3, [r2, #0]
			  if(val == 1 )
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <main+0x3e0>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d10c      	bne.n	8000814 <main+0x3ac>
			  {
				  HAL_GPIO_WritePin(U_AB_GPIO_Port, U_AB_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000800:	480c      	ldr	r0, [pc, #48]	; (8000834 <main+0x3cc>)
 8000802:	f001 feee 	bl	80025e2 <HAL_GPIO_WritePin>
  //				  HAL_Delay(1);
				  HAL_GPIO_WritePin(U_ac_dc_GPIO_Port, U_ac_dc_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080c:	4809      	ldr	r0, [pc, #36]	; (8000834 <main+0x3cc>)
 800080e:	f001 fee8 	bl	80025e2 <HAL_GPIO_WritePin>
 8000812:	e00b      	b.n	800082c <main+0x3c4>
			  }
			  else
			  {
				  HAL_GPIO_WritePin(U_AB_GPIO_Port, U_AB_Pin, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <main+0x3cc>)
 800081c:	f001 fee1 	bl	80025e2 <HAL_GPIO_WritePin>
  //				  HAL_Delay(1);
				  HAL_GPIO_WritePin(U_ac_dc_GPIO_Port, U_ac_dc_Pin, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000826:	4803      	ldr	r0, [pc, #12]	; (8000834 <main+0x3cc>)
 8000828:	f001 fedb 	bl	80025e2 <HAL_GPIO_WritePin>
			  }
		  }
		  update_lcd();
 800082c:	f7ff fc8e 	bl	800014c <update_lcd>
	  switch(getState())
 8000830:	e663      	b.n	80004fa <main+0x92>
 8000832:	bf00      	nop
 8000834:	40010800 	.word	0x40010800
 8000838:	40010c00 	.word	0x40010c00
 800083c:	20000038 	.word	0x20000038
 8000840:	66666667 	.word	0x66666667
 8000844:	20000030 	.word	0x20000030
 8000848:	20000120 	.word	0x20000120

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b094      	sub	sp, #80	; 0x50
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000856:	2228      	movs	r2, #40	; 0x28
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f003 fdca 	bl	80043f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087c:	2301      	movs	r3, #1
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088a:	2301      	movs	r3, #1
 800088c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088e:	2302      	movs	r3, #2
 8000890:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000892:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000896:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000898:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800089c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 feb6 	bl	8002614 <HAL_RCC_OscConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008ae:	f000 fa01 	bl	8000cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	230f      	movs	r3, #15
 80008b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2102      	movs	r1, #2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 f920 	bl	8002b14 <HAL_RCC_ClockConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x92>
  {
    Error_Handler();
 80008da:	f000 f9eb 	bl	8000cb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008de:	2302      	movs	r3, #2
 80008e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80008e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 fa9a 	bl	8002e24 <HAL_RCCEx_PeriphCLKConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008f6:	f000 f9dd 	bl	8000cb4 <Error_Handler>
  }
}
 80008fa:	bf00      	nop
 80008fc:	3750      	adds	r7, #80	; 0x50
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000914:	4b2e      	ldr	r3, [pc, #184]	; (80009d0 <MX_ADC1_Init+0xcc>)
 8000916:	4a2f      	ldr	r2, [pc, #188]	; (80009d4 <MX_ADC1_Init+0xd0>)
 8000918:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800091a:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <MX_ADC1_Init+0xcc>)
 800091c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000920:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000922:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <MX_ADC1_Init+0xcc>)
 8000924:	2200      	movs	r2, #0
 8000926:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000928:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <MX_ADC1_Init+0xcc>)
 800092a:	2200      	movs	r2, #0
 800092c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 800092e:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <MX_ADC1_Init+0xcc>)
 8000930:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000934:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000936:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <MX_ADC1_Init+0xcc>)
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 800093c:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <MX_ADC1_Init+0xcc>)
 800093e:	2204      	movs	r2, #4
 8000940:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000942:	4823      	ldr	r0, [pc, #140]	; (80009d0 <MX_ADC1_Init+0xcc>)
 8000944:	f000 fd92 	bl	800146c <HAL_ADC_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800094e:	f000 f9b1 	bl	8000cb4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000952:	2306      	movs	r3, #6
 8000954:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000956:	2301      	movs	r3, #1
 8000958:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 800095a:	2302      	movs	r3, #2
 800095c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4619      	mov	r1, r3
 8000962:	481b      	ldr	r0, [pc, #108]	; (80009d0 <MX_ADC1_Init+0xcc>)
 8000964:	f000 ff4a 	bl	80017fc <HAL_ADC_ConfigChannel>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800096e:	f000 f9a1 	bl	8000cb4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000972:	2307      	movs	r3, #7
 8000974:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000976:	2302      	movs	r3, #2
 8000978:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4814      	ldr	r0, [pc, #80]	; (80009d0 <MX_ADC1_Init+0xcc>)
 8000980:	f000 ff3c 	bl	80017fc <HAL_ADC_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800098a:	f000 f993 	bl	8000cb4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800098e:	2308      	movs	r3, #8
 8000990:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000992:	2303      	movs	r3, #3
 8000994:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4619      	mov	r1, r3
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <MX_ADC1_Init+0xcc>)
 800099c:	f000 ff2e 	bl	80017fc <HAL_ADC_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80009a6:	f000 f985 	bl	8000cb4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009aa:	2309      	movs	r3, #9
 80009ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009ae:	2304      	movs	r3, #4
 80009b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <MX_ADC1_Init+0xcc>)
 80009b8:	f000 ff20 	bl	80017fc <HAL_ADC_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80009c2:	f000 f977 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000f0 	.word	0x200000f0
 80009d4:	40012400 	.word	0x40012400

080009d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_SPI2_Init+0x64>)
 80009de:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <MX_SPI2_Init+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_SPI2_Init+0x64>)
 80009e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_SPI2_Init+0x64>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_SPI2_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_SPI2_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_SPI2_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_SPI2_Init+0x64>)
 8000a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_SPI2_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <MX_SPI2_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_SPI2_Init+0x64>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <MX_SPI2_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_SPI2_Init+0x64>)
 8000a24:	220a      	movs	r2, #10
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_SPI2_Init+0x64>)
 8000a2a:	f002 fb6d 	bl	8003108 <HAL_SPI_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a34:	f000 f93e 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000003c 	.word	0x2000003c
 8000a40:	40003800 	.word	0x40003800

08000a44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a60:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <MX_TIM1_Init+0x9c>)
 8000a62:	4a20      	ldr	r2, [pc, #128]	; (8000ae4 <MX_TIM1_Init+0xa0>)
 8000a64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 8000a66:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <MX_TIM1_Init+0x9c>)
 8000a68:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000a6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <MX_TIM1_Init+0x9c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_TIM1_Init+0x9c>)
 8000a76:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000a7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_TIM1_Init+0x9c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_TIM1_Init+0x9c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_TIM1_Init+0x9c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a8e:	4814      	ldr	r0, [pc, #80]	; (8000ae0 <MX_TIM1_Init+0x9c>)
 8000a90:	f002 fda0 	bl	80035d4 <HAL_TIM_Base_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a9a:	f000 f90b 	bl	8000cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <MX_TIM1_Init+0x9c>)
 8000aac:	f003 f886 	bl	8003bbc <HAL_TIM_ConfigClockSource>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ab6:	f000 f8fd 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <MX_TIM1_Init+0x9c>)
 8000ac8:	f003 fc00 	bl	80042cc <HAL_TIMEx_MasterConfigSynchronization>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000ad2:	f000 f8ef 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000016c 	.word	0x2000016c
 8000ae4:	40012c00 	.word	0x40012c00

08000ae8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aee:	f107 0320 	add.w	r3, r7, #32
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
 8000b06:	615a      	str	r2, [r3, #20]
 8000b08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b0a:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <MX_TIM4_Init+0xa8>)
 8000b0c:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <MX_TIM4_Init+0xac>)
 8000b0e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 720;
 8000b10:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <MX_TIM4_Init+0xa8>)
 8000b12:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8000b16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <MX_TIM4_Init+0xa8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <MX_TIM4_Init+0xa8>)
 8000b20:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <MX_TIM4_Init+0xa8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2c:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <MX_TIM4_Init+0xa8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000b32:	4817      	ldr	r0, [pc, #92]	; (8000b90 <MX_TIM4_Init+0xa8>)
 8000b34:	f002 fdf0 	bl	8003718 <HAL_TIM_OC_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000b3e:	f000 f8b9 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b4a:	f107 0320 	add.w	r3, r7, #32
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480f      	ldr	r0, [pc, #60]	; (8000b90 <MX_TIM4_Init+0xa8>)
 8000b52:	f003 fbbb 	bl	80042cc <HAL_TIMEx_MasterConfigSynchronization>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000b5c:	f000 f8aa 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000b60:	2330      	movs	r3, #48	; 0x30
 8000b62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	220c      	movs	r2, #12
 8000b74:	4619      	mov	r1, r3
 8000b76:	4806      	ldr	r0, [pc, #24]	; (8000b90 <MX_TIM4_Init+0xa8>)
 8000b78:	f002 ffc8 	bl	8003b0c <HAL_TIM_OC_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000b82:	f000 f897 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000098 	.word	0x20000098
 8000b94:	40000800 	.word	0x40000800

08000b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_DMA_Init+0x38>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <MX_DMA_Init+0x38>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6153      	str	r3, [r2, #20]
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_DMA_Init+0x38>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	200b      	movs	r0, #11
 8000bbc:	f001 f97b 	bl	8001eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bc0:	200b      	movs	r0, #11
 8000bc2:	f001 f994 	bl	8001eee <HAL_NVIC_EnableIRQ>

}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be8:	4b2f      	ldr	r3, [pc, #188]	; (8000ca8 <MX_GPIO_Init+0xd4>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a2e      	ldr	r2, [pc, #184]	; (8000ca8 <MX_GPIO_Init+0xd4>)
 8000bee:	f043 0320 	orr.w	r3, r3, #32
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <MX_GPIO_Init+0xd4>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0320 	and.w	r3, r3, #32
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <MX_GPIO_Init+0xd4>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a28      	ldr	r2, [pc, #160]	; (8000ca8 <MX_GPIO_Init+0xd4>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <MX_GPIO_Init+0xd4>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <MX_GPIO_Init+0xd4>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a22      	ldr	r2, [pc, #136]	; (8000ca8 <MX_GPIO_Init+0xd4>)
 8000c1e:	f043 0308 	orr.w	r3, r3, #8
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <MX_GPIO_Init+0xd4>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0308 	and.w	r3, r3, #8
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MR_LCD_Pin|dig_3_Pin|dig_2_Pin|dig_1_Pin
 8000c30:	2200      	movs	r2, #0
 8000c32:	f641 61fc 	movw	r1, #7932	; 0x1efc
 8000c36:	481d      	ldr	r0, [pc, #116]	; (8000cac <MX_GPIO_Init+0xd8>)
 8000c38:	f001 fcd3 	bl	80025e2 <HAL_GPIO_WritePin>
                          |I_mor_20_Pin|Opt_Buffer_Pin|Discharge_AB_Pin|Overpower_Pin
                          |NetOn_Pin|buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, U_AB_Pin|U_ac_dc_Pin|U_AB_29_Pin|U_AB_24_Pin
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 8000c42:	481b      	ldr	r0, [pc, #108]	; (8000cb0 <MX_GPIO_Init+0xdc>)
 8000c44:	f001 fccd 	bl	80025e2 <HAL_GPIO_WritePin>
                          |U_ac_dc_0_Pin|T_high_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MR_LCD_Pin dig_3_Pin dig_2_Pin dig_1_Pin
                           I_mor_20_Pin Opt_Buffer_Pin Discharge_AB_Pin Overpower_Pin
                           NetOn_Pin buzzer_Pin */
  GPIO_InitStruct.Pin = MR_LCD_Pin|dig_3_Pin|dig_2_Pin|dig_1_Pin
 8000c48:	f641 63fc 	movw	r3, #7932	; 0x1efc
 8000c4c:	613b      	str	r3, [r7, #16]
                          |I_mor_20_Pin|Opt_Buffer_Pin|Discharge_AB_Pin|Overpower_Pin
                          |NetOn_Pin|buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4812      	ldr	r0, [pc, #72]	; (8000cac <MX_GPIO_Init+0xd8>)
 8000c62:	f001 fb4d 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pins : U_AB_Pin U_ac_dc_Pin U_AB_29_Pin U_AB_24_Pin
                           U_ac_dc_0_Pin T_high_Pin */
  GPIO_InitStruct.Pin = U_AB_Pin|U_ac_dc_Pin|U_AB_29_Pin|U_AB_24_Pin
 8000c66:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 8000c6a:	613b      	str	r3, [r7, #16]
                          |U_ac_dc_0_Pin|T_high_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <MX_GPIO_Init+0xdc>)
 8000c80:	f001 fb3e 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	4619      	mov	r1, r3
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_GPIO_Init+0xd8>)
 8000c9a:	f001 fb31 	bl	8002300 <HAL_GPIO_Init>

}
 8000c9e:	bf00      	nop
 8000ca0:	3720      	adds	r7, #32
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010c00 	.word	0x40010c00
 8000cb0:	40010800 	.word	0x40010800

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <measure_data>:
#include "measurements.h"



void measure_data()
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
	  U_AB 				= (filtr_U_ac_dc* 8850)/100000;		//(filtr_U_ac_dc* 8057)/100000;
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <measure_data+0x7c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f242 2292 	movw	r2, #8850	; 0x2292
 8000ccc:	fb02 f303 	mul.w	r3, r2, r3
 8000cd0:	095b      	lsrs	r3, r3, #5
 8000cd2:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <measure_data+0x80>)
 8000cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd8:	09db      	lsrs	r3, r3, #7
 8000cda:	4a1a      	ldr	r2, [pc, #104]	; (8000d44 <measure_data+0x84>)
 8000cdc:	6013      	str	r3, [r2, #0]
	  U_ac_dc 			= (filtr_U_AB * 8660)/100000;		//(filtr_U_AB * 8057)/100000;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <measure_data+0x88>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f242 12d4 	movw	r2, #8660	; 0x21d4
 8000ce6:	fb02 f303 	mul.w	r3, r2, r3
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <measure_data+0x80>)
 8000cee:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf2:	09db      	lsrs	r3, r3, #7
 8000cf4:	4a15      	ldr	r2, [pc, #84]	; (8000d4c <measure_data+0x8c>)
 8000cf6:	6013      	str	r3, [r2, #0]
	  I_shunt 			= (filtr_I_shunt*8057)/100000;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <measure_data+0x90>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f641 7279 	movw	r2, #8057	; 0x1f79
 8000d00:	fb02 f303 	mul.w	r3, r2, r3
 8000d04:	095b      	lsrs	r3, r3, #5
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <measure_data+0x80>)
 8000d08:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0c:	09db      	lsrs	r3, r3, #7
 8000d0e:	4a11      	ldr	r2, [pc, #68]	; (8000d54 <measure_data+0x94>)
 8000d10:	6013      	str	r3, [r2, #0]
	  temperature	 	= (((filtr_temperature*330000)/4096) - 273150)/100;
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <measure_data+0x98>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <measure_data+0x9c>)
 8000d18:	fb02 f303 	mul.w	r3, r2, r3
 8000d1c:	0b1b      	lsrs	r3, r3, #12
 8000d1e:	f5a3 2385 	sub.w	r3, r3, #272384	; 0x42800
 8000d22:	f2a3 23fe 	subw	r3, r3, #766	; 0x2fe
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <measure_data+0xa0>)
 8000d28:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2c:	095b      	lsrs	r3, r3, #5
 8000d2e:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <measure_data+0xa4>)
 8000d30:	6013      	str	r3, [r2, #0]
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	200001c0 	.word	0x200001c0
 8000d40:	0a7c5ac5 	.word	0x0a7c5ac5
 8000d44:	20000168 	.word	0x20000168
 8000d48:	200001b4 	.word	0x200001b4
 8000d4c:	20000094 	.word	0x20000094
 8000d50:	200001bc 	.word	0x200001bc
 8000d54:	20000034 	.word	0x20000034
 8000d58:	200001b8 	.word	0x200001b8
 8000d5c:	00050910 	.word	0x00050910
 8000d60:	51eb851f 	.word	0x51eb851f
 8000d64:	200000e8 	.word	0x200000e8

08000d68 <init_filtr>:

void init_filtr()
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
	filtr_U_ac_dc 		= 0;
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <init_filtr+0x24>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
	filtr_U_AB 			= 0;
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <init_filtr+0x28>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
	filtr_I_shunt 		= 0;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <init_filtr+0x2c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
	filtr_temperature 	= 0;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <init_filtr+0x30>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	200001c0 	.word	0x200001c0
 8000d90:	200001b4 	.word	0x200001b4
 8000d94:	200001bc 	.word	0x200001bc
 8000d98:	200001b8 	.word	0x200001b8

08000d9c <mean_vals>:


void mean_vals()
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

	filtr_U_ac_dc 		= (adc_1[0] + filtr_U_ac_dc		*(FILTR_NUM-1)) / FILTR_NUM;
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <mean_vals+0x6c>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <mean_vals+0x70>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4613      	mov	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	1a9b      	subs	r3, r3, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	08db      	lsrs	r3, r3, #3
 8000db4:	4a15      	ldr	r2, [pc, #84]	; (8000e0c <mean_vals+0x70>)
 8000db6:	6013      	str	r3, [r2, #0]
	filtr_U_AB 			= (adc_1[1] + filtr_U_AB		*(FILTR_NUM-1)) / FILTR_NUM;
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <mean_vals+0x6c>)
 8000dba:	885b      	ldrh	r3, [r3, #2]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <mean_vals+0x74>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	08db      	lsrs	r3, r3, #3
 8000dcc:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <mean_vals+0x74>)
 8000dce:	6013      	str	r3, [r2, #0]
	filtr_I_shunt 		= (adc_1[2] + filtr_I_shunt		*(FILTR_NUM-1)) / FILTR_NUM;
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <mean_vals+0x6c>)
 8000dd2:	889b      	ldrh	r3, [r3, #4]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <mean_vals+0x78>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	1a9b      	subs	r3, r3, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	08db      	lsrs	r3, r3, #3
 8000de4:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <mean_vals+0x78>)
 8000de6:	6013      	str	r3, [r2, #0]
	filtr_temperature 	= (adc_1[3] + filtr_temperature	*(FILTR_NUM-1)) / FILTR_NUM;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <mean_vals+0x6c>)
 8000dea:	88db      	ldrh	r3, [r3, #6]
 8000dec:	4619      	mov	r1, r3
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <mean_vals+0x7c>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4613      	mov	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	1a9b      	subs	r3, r3, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	08db      	lsrs	r3, r3, #3
 8000dfc:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <mean_vals+0x7c>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	20000028 	.word	0x20000028
 8000e0c:	200001c0 	.word	0x200001c0
 8000e10:	200001b4 	.word	0x200001b4
 8000e14:	200001bc 	.word	0x200001bc
 8000e18:	200001b8 	.word	0x200001b8

08000e1c <getState>:


#include "state_machine.h"

STATE_t getState()
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
	return currState;
 8000e20:	4b02      	ldr	r3, [pc, #8]	; (8000e2c <getState+0x10>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	200000e0 	.word	0x200000e0

08000e30 <setState>:

void setState(STATE_t st)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	currState = st;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <setState+0x1c>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	7013      	strb	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	200000e0 	.word	0x200000e0

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <HAL_MspInit+0x5c>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	4a14      	ldr	r2, [pc, #80]	; (8000eac <HAL_MspInit+0x5c>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6193      	str	r3, [r2, #24]
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_MspInit+0x5c>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <HAL_MspInit+0x5c>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_MspInit+0x5c>)
 8000e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e78:	61d3      	str	r3, [r2, #28]
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <HAL_MspInit+0x5c>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_MspInit+0x60>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_MspInit+0x60>)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010000 	.word	0x40010000

08000eb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0318 	add.w	r3, r7, #24
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a33      	ldr	r2, [pc, #204]	; (8000f9c <HAL_ADC_MspInit+0xe8>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d15f      	bne.n	8000f94 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ed4:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <HAL_ADC_MspInit+0xec>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a31      	ldr	r2, [pc, #196]	; (8000fa0 <HAL_ADC_MspInit+0xec>)
 8000eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <HAL_ADC_MspInit+0xec>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <HAL_ADC_MspInit+0xec>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a2b      	ldr	r2, [pc, #172]	; (8000fa0 <HAL_ADC_MspInit+0xec>)
 8000ef2:	f043 0304 	orr.w	r3, r3, #4
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <HAL_ADC_MspInit+0xec>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f04:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <HAL_ADC_MspInit+0xec>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a25      	ldr	r2, [pc, #148]	; (8000fa0 <HAL_ADC_MspInit+0xec>)
 8000f0a:	f043 0308 	orr.w	r3, r3, #8
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <HAL_ADC_MspInit+0xec>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f1c:	23c0      	movs	r3, #192	; 0xc0
 8000f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f20:	2303      	movs	r3, #3
 8000f22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 0318 	add.w	r3, r7, #24
 8000f28:	4619      	mov	r1, r3
 8000f2a:	481e      	ldr	r0, [pc, #120]	; (8000fa4 <HAL_ADC_MspInit+0xf0>)
 8000f2c:	f001 f9e8 	bl	8002300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f30:	2303      	movs	r3, #3
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f34:	2303      	movs	r3, #3
 8000f36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 0318 	add.w	r3, r7, #24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	481a      	ldr	r0, [pc, #104]	; (8000fa8 <HAL_ADC_MspInit+0xf4>)
 8000f40:	f001 f9de 	bl	8002300 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <HAL_ADC_MspInit+0xf8>)
 8000f46:	4a1a      	ldr	r2, [pc, #104]	; (8000fb0 <HAL_ADC_MspInit+0xfc>)
 8000f48:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_ADC_MspInit+0xf8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <HAL_ADC_MspInit+0xf8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_ADC_MspInit+0xf8>)
 8000f58:	2280      	movs	r2, #128	; 0x80
 8000f5a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <HAL_ADC_MspInit+0xf8>)
 8000f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f62:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_ADC_MspInit+0xf8>)
 8000f66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <HAL_ADC_MspInit+0xf8>)
 8000f6e:	2220      	movs	r2, #32
 8000f70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_ADC_MspInit+0xf8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <HAL_ADC_MspInit+0xf8>)
 8000f7a:	f000 ffd3 	bl	8001f24 <HAL_DMA_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000f84:	f7ff fe96 	bl	8000cb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_ADC_MspInit+0xf8>)
 8000f8c:	621a      	str	r2, [r3, #32]
 8000f8e:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_ADC_MspInit+0xf8>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40012400 	.word	0x40012400
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010800 	.word	0x40010800
 8000fa8:	40010c00 	.word	0x40010c00
 8000fac:	20000124 	.word	0x20000124
 8000fb0:	40020008 	.word	0x40020008

08000fb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a1c      	ldr	r2, [pc, #112]	; (8001040 <HAL_SPI_MspInit+0x8c>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d131      	bne.n	8001038 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <HAL_SPI_MspInit+0x90>)
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	4a1a      	ldr	r2, [pc, #104]	; (8001044 <HAL_SPI_MspInit+0x90>)
 8000fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fde:	61d3      	str	r3, [r2, #28]
 8000fe0:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_SPI_MspInit+0x90>)
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_SPI_MspInit+0x90>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a14      	ldr	r2, [pc, #80]	; (8001044 <HAL_SPI_MspInit+0x90>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_SPI_MspInit+0x90>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001004:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001008:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	4619      	mov	r1, r3
 8001018:	480b      	ldr	r0, [pc, #44]	; (8001048 <HAL_SPI_MspInit+0x94>)
 800101a:	f001 f971 	bl	8002300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800101e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	4619      	mov	r1, r3
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <HAL_SPI_MspInit+0x94>)
 8001034:	f001 f964 	bl	8002300 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001038:	bf00      	nop
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40003800 	.word	0x40003800
 8001044:	40021000 	.word	0x40021000
 8001048:	40010c00 	.word	0x40010c00

0800104c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_TIM_Base_MspInit+0x44>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d113      	bne.n	8001086 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_TIM_Base_MspInit+0x48>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <HAL_TIM_Base_MspInit+0x48>)
 8001064:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001068:	6193      	str	r3, [r2, #24]
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_TIM_Base_MspInit+0x48>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	2019      	movs	r0, #25
 800107c:	f000 ff1b 	bl	8001eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001080:	2019      	movs	r0, #25
 8001082:	f000 ff34 	bl	8001eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40012c00 	.word	0x40012c00
 8001094:	40021000 	.word	0x40021000

08001098 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a09      	ldr	r2, [pc, #36]	; (80010cc <HAL_TIM_OC_MspInit+0x34>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d10b      	bne.n	80010c2 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_TIM_OC_MspInit+0x38>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <HAL_TIM_OC_MspInit+0x38>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	61d3      	str	r3, [r2, #28]
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_TIM_OC_MspInit+0x38>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	40000800 	.word	0x40000800
 80010d0:	40021000 	.word	0x40021000

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <HardFault_Handler+0x4>

080010e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <MemManage_Handler+0x4>

080010ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <BusFault_Handler+0x4>

080010f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <UsageFault_Handler+0x4>

080010f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001120:	f000 f966 	bl	80013f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}

08001128 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <DMA1_Channel1_IRQHandler+0x10>)
 800112e:	f000 ffb3 	bl	8002098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000124 	.word	0x20000124

0800113c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

	main_counter++;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <TIM1_UP_IRQHandler+0x2c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	3301      	adds	r3, #1
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <TIM1_UP_IRQHandler+0x2c>)
 8001148:	6013      	str	r3, [r2, #0]
	if(main_counter > 10000)
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <TIM1_UP_IRQHandler+0x2c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001152:	4293      	cmp	r3, r2
 8001154:	dd02      	ble.n	800115c <TIM1_UP_IRQHandler+0x20>
		main_counter = 0;
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <TIM1_UP_IRQHandler+0x2c>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <TIM1_UP_IRQHandler+0x30>)
 800115e:	f002 fbcd 	bl	80038fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000038 	.word	0x20000038
 800116c:	2000016c 	.word	0x2000016c

08001170 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <SystemInit+0x5c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a14      	ldr	r2, [pc, #80]	; (80011cc <SystemInit+0x5c>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <SystemInit+0x5c>)
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	4911      	ldr	r1, [pc, #68]	; (80011cc <SystemInit+0x5c>)
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <SystemInit+0x60>)
 8001188:	4013      	ands	r3, r2
 800118a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <SystemInit+0x5c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <SystemInit+0x5c>)
 8001192:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <SystemInit+0x5c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <SystemInit+0x5c>)
 80011a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <SystemInit+0x5c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4a07      	ldr	r2, [pc, #28]	; (80011cc <SystemInit+0x5c>)
 80011ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80011b2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <SystemInit+0x5c>)
 80011b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011ba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <SystemInit+0x64>)
 80011be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011c2:	609a      	str	r2, [r3, #8]
#endif 
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	40021000 	.word	0x40021000
 80011d0:	f8ff0000 	.word	0xf8ff0000
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <all_leds_on>:

#include "test.h"


void all_leds_on()
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(U_AB_GPIO_Port, U_AB_Pin, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e2:	4814      	ldr	r0, [pc, #80]	; (8001234 <all_leds_on+0x5c>)
 80011e4:	f001 f9fd 	bl	80025e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U_ac_dc_GPIO_Port, U_ac_dc_Pin, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ee:	4811      	ldr	r0, [pc, #68]	; (8001234 <all_leds_on+0x5c>)
 80011f0:	f001 f9f7 	bl	80025e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U_AB_29_GPIO_Port, U_AB_29_Pin, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fa:	480e      	ldr	r0, [pc, #56]	; (8001234 <all_leds_on+0x5c>)
 80011fc:	f001 f9f1 	bl	80025e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U_AB_24_GPIO_Port, U_AB_24_Pin, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001206:	480b      	ldr	r0, [pc, #44]	; (8001234 <all_leds_on+0x5c>)
 8001208:	f001 f9eb 	bl	80025e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U_ac_dc_0_GPIO_Port, U_ac_dc_0_Pin, GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001212:	4808      	ldr	r0, [pc, #32]	; (8001234 <all_leds_on+0x5c>)
 8001214:	f001 f9e5 	bl	80025e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_high_GPIO_Port, T_high_Pin, GPIO_PIN_SET);
 8001218:	2201      	movs	r2, #1
 800121a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <all_leds_on+0x5c>)
 8001220:	f001 f9df 	bl	80025e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I_mor_20_GPIO_Port, I_mor_20_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2108      	movs	r1, #8
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <all_leds_on+0x60>)
 800122a:	f001 f9da 	bl	80025e2 <HAL_GPIO_WritePin>
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40010800 	.word	0x40010800
 8001238:	40010c00 	.word	0x40010c00

0800123c <all_leds_off>:
void all_leds_off()
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(U_AB_GPIO_Port, U_AB_Pin, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001246:	4814      	ldr	r0, [pc, #80]	; (8001298 <all_leds_off+0x5c>)
 8001248:	f001 f9cb 	bl	80025e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U_ac_dc_GPIO_Port, U_ac_dc_Pin, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001252:	4811      	ldr	r0, [pc, #68]	; (8001298 <all_leds_off+0x5c>)
 8001254:	f001 f9c5 	bl	80025e2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(U_AB_29_GPIO_Port, U_AB_29_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <all_leds_off+0x5c>)
 8001260:	f001 f9bf 	bl	80025e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U_AB_24_GPIO_Port, U_AB_24_Pin, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800126a:	480b      	ldr	r0, [pc, #44]	; (8001298 <all_leds_off+0x5c>)
 800126c:	f001 f9b9 	bl	80025e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(U_ac_dc_0_GPIO_Port, U_ac_dc_0_Pin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001276:	4808      	ldr	r0, [pc, #32]	; (8001298 <all_leds_off+0x5c>)
 8001278:	f001 f9b3 	bl	80025e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_high_GPIO_Port, T_high_Pin, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <all_leds_off+0x5c>)
 8001284:	f001 f9ad 	bl	80025e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I_mor_20_GPIO_Port, I_mor_20_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2108      	movs	r1, #8
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <all_leds_off+0x60>)
 800128e:	f001 f9a8 	bl	80025e2 <HAL_GPIO_WritePin>
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40010800 	.word	0x40010800
 800129c:	40010c00 	.word	0x40010c00

080012a0 <all_segments_on>:
void all_segments_on()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, MR_LCD_Pin, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2104      	movs	r1, #4
 80012a8:	480b      	ldr	r0, [pc, #44]	; (80012d8 <all_segments_on+0x38>)
 80012aa:	f001 f99a 	bl	80025e2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(dig_1_GPIO_Port, dig_1_Pin, GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b4:	4808      	ldr	r0, [pc, #32]	; (80012d8 <all_segments_on+0x38>)
 80012b6:	f001 f994 	bl	80025e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dig_2_GPIO_Port, dig_2_Pin, GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <all_segments_on+0x38>)
 80012c2:	f001 f98e 	bl	80025e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dig_3_GPIO_Port, dig_3_Pin, GPIO_PIN_SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <all_segments_on+0x38>)
 80012ce:	f001 f988 	bl	80025e2 <HAL_GPIO_WritePin>


}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40010c00 	.word	0x40010c00

080012dc <all_segments_off>:
void all_segments_off()
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, MR_LCD_Pin, GPIO_PIN_SET);
 80012e0:	2201      	movs	r2, #1
 80012e2:	2104      	movs	r1, #4
 80012e4:	480b      	ldr	r0, [pc, #44]	; (8001314 <all_segments_off+0x38>)
 80012e6:	f001 f97c 	bl	80025e2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(dig_1_GPIO_Port, dig_1_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f0:	4808      	ldr	r0, [pc, #32]	; (8001314 <all_segments_off+0x38>)
 80012f2:	f001 f976 	bl	80025e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dig_2_GPIO_Port, dig_2_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <all_segments_off+0x38>)
 80012fe:	f001 f970 	bl	80025e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dig_3_GPIO_Port, dig_3_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <all_segments_off+0x38>)
 800130a:	f001 f96a 	bl	80025e2 <HAL_GPIO_WritePin>
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40010c00 	.word	0x40010c00

08001318 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001318:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800131a:	e003      	b.n	8001324 <LoopCopyDataInit>

0800131c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800131e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001320:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001322:	3104      	adds	r1, #4

08001324 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001324:	480a      	ldr	r0, [pc, #40]	; (8001350 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001328:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800132a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800132c:	d3f6      	bcc.n	800131c <CopyDataInit>
  ldr r2, =_sbss
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001330:	e002      	b.n	8001338 <LoopFillZerobss>

08001332 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001334:	f842 3b04 	str.w	r3, [r2], #4

08001338 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800133a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800133c:	d3f9      	bcc.n	8001332 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800133e:	f7ff ff17 	bl	8001170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001342:	f003 f833 	bl	80043ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001346:	f7ff f88f 	bl	8000468 <main>
  bx lr
 800134a:	4770      	bx	lr
  ldr r3, =_sidata
 800134c:	08004464 	.word	0x08004464
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001354:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001358:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800135c:	200001c8 	.word	0x200001c8

08001360 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001360:	e7fe      	b.n	8001360 <ADC1_2_IRQHandler>
	...

08001364 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_Init+0x28>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a07      	ldr	r2, [pc, #28]	; (800138c <HAL_Init+0x28>)
 800136e:	f043 0310 	orr.w	r3, r3, #16
 8001372:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001374:	2003      	movs	r0, #3
 8001376:	f000 fd93 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137a:	2000      	movs	r0, #0
 800137c:	f000 f808 	bl	8001390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001380:	f7ff fd66 	bl	8000e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40022000 	.word	0x40022000

08001390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_InitTick+0x54>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_InitTick+0x58>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fdab 	bl	8001f0a <HAL_SYSTICK_Config>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00e      	b.n	80013dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b0f      	cmp	r3, #15
 80013c2:	d80a      	bhi.n	80013da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c4:	2200      	movs	r2, #0
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f000 fd73 	bl	8001eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d0:	4a06      	ldr	r2, [pc, #24]	; (80013ec <HAL_InitTick+0x5c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e000      	b.n	80013dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000008 	.word	0x20000008
 80013ec:	20000004 	.word	0x20000004

080013f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_IncTick+0x1c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_IncTick+0x20>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a03      	ldr	r2, [pc, #12]	; (8001410 <HAL_IncTick+0x20>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	20000008 	.word	0x20000008
 8001410:	200001c4 	.word	0x200001c4

08001414 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return uwTick;
 8001418:	4b02      	ldr	r3, [pc, #8]	; (8001424 <HAL_GetTick+0x10>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	200001c4 	.word	0x200001c4

08001428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff fff0 	bl	8001414 <HAL_GetTick>
 8001434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001440:	d005      	beq.n	800144e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_Delay+0x40>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800144e:	bf00      	nop
 8001450:	f7ff ffe0 	bl	8001414 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	429a      	cmp	r2, r3
 800145e:	d8f7      	bhi.n	8001450 <HAL_Delay+0x28>
  {
  }
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000008 	.word	0x20000008

0800146c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0be      	b.n	800160c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	2b00      	cmp	r3, #0
 800149a:	d109      	bne.n	80014b0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff fd02 	bl	8000eb4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 faed 	bl	8001a90 <ADC_ConversionStop_Disable>
 80014b6:	4603      	mov	r3, r0
 80014b8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014be:	f003 0310 	and.w	r3, r3, #16
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f040 8099 	bne.w	80015fa <HAL_ADC_Init+0x18e>
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f040 8095 	bne.w	80015fa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014d8:	f023 0302 	bic.w	r3, r3, #2
 80014dc:	f043 0202 	orr.w	r2, r3, #2
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014ec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7b1b      	ldrb	r3, [r3, #12]
 80014f2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014f4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001504:	d003      	beq.n	800150e <HAL_ADC_Init+0xa2>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d102      	bne.n	8001514 <HAL_ADC_Init+0xa8>
 800150e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001512:	e000      	b.n	8001516 <HAL_ADC_Init+0xaa>
 8001514:	2300      	movs	r3, #0
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7d1b      	ldrb	r3, [r3, #20]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d119      	bne.n	8001558 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7b1b      	ldrb	r3, [r3, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d109      	bne.n	8001540 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	3b01      	subs	r3, #1
 8001532:	035a      	lsls	r2, r3, #13
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	e00b      	b.n	8001558 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001544:	f043 0220 	orr.w	r2, r3, #32
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001550:	f043 0201 	orr.w	r2, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	430a      	orrs	r2, r1
 800156a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	4b28      	ldr	r3, [pc, #160]	; (8001614 <HAL_ADC_Init+0x1a8>)
 8001574:	4013      	ands	r3, r2
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6812      	ldr	r2, [r2, #0]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	430b      	orrs	r3, r1
 800157e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001588:	d003      	beq.n	8001592 <HAL_ADC_Init+0x126>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d104      	bne.n	800159c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	3b01      	subs	r3, #1
 8001598:	051b      	lsls	r3, r3, #20
 800159a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_ADC_Init+0x1ac>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d10b      	bne.n	80015d8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	f023 0303 	bic.w	r3, r3, #3
 80015ce:	f043 0201 	orr.w	r2, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015d6:	e018      	b.n	800160a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	f023 0312 	bic.w	r3, r3, #18
 80015e0:	f043 0210 	orr.w	r2, r3, #16
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	f043 0201 	orr.w	r2, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015f8:	e007      	b.n	800160a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	f043 0210 	orr.w	r2, r3, #16
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800160a:	7dfb      	ldrb	r3, [r7, #23]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	ffe1f7fd 	.word	0xffe1f7fd
 8001618:	ff1f0efe 	.word	0xff1f0efe

0800161c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a64      	ldr	r2, [pc, #400]	; (80017c4 <HAL_ADC_Start_DMA+0x1a8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d004      	beq.n	8001640 <HAL_ADC_Start_DMA+0x24>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a63      	ldr	r2, [pc, #396]	; (80017c8 <HAL_ADC_Start_DMA+0x1ac>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d106      	bne.n	800164e <HAL_ADC_Start_DMA+0x32>
 8001640:	4b60      	ldr	r3, [pc, #384]	; (80017c4 <HAL_ADC_Start_DMA+0x1a8>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001648:	2b00      	cmp	r3, #0
 800164a:	f040 80b3 	bne.w	80017b4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_ADC_Start_DMA+0x40>
 8001658:	2302      	movs	r3, #2
 800165a:	e0ae      	b.n	80017ba <HAL_ADC_Start_DMA+0x19e>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f000 f9c1 	bl	80019ec <ADC_Enable>
 800166a:	4603      	mov	r3, r0
 800166c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	2b00      	cmp	r3, #0
 8001672:	f040 809a 	bne.w	80017aa <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800167e:	f023 0301 	bic.w	r3, r3, #1
 8001682:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a4e      	ldr	r2, [pc, #312]	; (80017c8 <HAL_ADC_Start_DMA+0x1ac>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d105      	bne.n	80016a0 <HAL_ADC_Start_DMA+0x84>
 8001694:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <HAL_ADC_Start_DMA+0x1a8>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d115      	bne.n	80016cc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d026      	beq.n	8001708 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016ca:	e01d      	b.n	8001708 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a39      	ldr	r2, [pc, #228]	; (80017c4 <HAL_ADC_Start_DMA+0x1a8>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d004      	beq.n	80016ec <HAL_ADC_Start_DMA+0xd0>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a38      	ldr	r2, [pc, #224]	; (80017c8 <HAL_ADC_Start_DMA+0x1ac>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d10d      	bne.n	8001708 <HAL_ADC_Start_DMA+0xec>
 80016ec:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <HAL_ADC_Start_DMA+0x1a8>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d007      	beq.n	8001708 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001700:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	f023 0206 	bic.w	r2, r3, #6
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001720:	e002      	b.n	8001728 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4a25      	ldr	r2, [pc, #148]	; (80017cc <HAL_ADC_Start_DMA+0x1b0>)
 8001736:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a24      	ldr	r2, [pc, #144]	; (80017d0 <HAL_ADC_Start_DMA+0x1b4>)
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <HAL_ADC_Start_DMA+0x1b8>)
 8001746:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f06f 0202 	mvn.w	r2, #2
 8001750:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001760:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6a18      	ldr	r0, [r3, #32]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	334c      	adds	r3, #76	; 0x4c
 800176c:	4619      	mov	r1, r3
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f000 fc31 	bl	8001fd8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001780:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001784:	d108      	bne.n	8001798 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001794:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001796:	e00f      	b.n	80017b8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80017a6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80017a8:	e006      	b.n	80017b8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80017b2:	e001      	b.n	80017b8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40012400 	.word	0x40012400
 80017c8:	40012800 	.word	0x40012800
 80017cc:	08001b05 	.word	0x08001b05
 80017d0:	08001b81 	.word	0x08001b81
 80017d4:	08001b9d 	.word	0x08001b9d

080017d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_ADC_ConfigChannel+0x20>
 8001818:	2302      	movs	r3, #2
 800181a:	e0dc      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x1da>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b06      	cmp	r3, #6
 800182a:	d81c      	bhi.n	8001866 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	3b05      	subs	r3, #5
 800183e:	221f      	movs	r2, #31
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	4019      	ands	r1, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	3b05      	subs	r3, #5
 8001858:	fa00 f203 	lsl.w	r2, r0, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	635a      	str	r2, [r3, #52]	; 0x34
 8001864:	e03c      	b.n	80018e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b0c      	cmp	r3, #12
 800186c:	d81c      	bhi.n	80018a8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	3b23      	subs	r3, #35	; 0x23
 8001880:	221f      	movs	r2, #31
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	4019      	ands	r1, r3
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	3b23      	subs	r3, #35	; 0x23
 800189a:	fa00 f203 	lsl.w	r2, r0, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	631a      	str	r2, [r3, #48]	; 0x30
 80018a6:	e01b      	b.n	80018e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	3b41      	subs	r3, #65	; 0x41
 80018ba:	221f      	movs	r2, #31
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	4019      	ands	r1, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	3b41      	subs	r3, #65	; 0x41
 80018d4:	fa00 f203 	lsl.w	r2, r0, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b09      	cmp	r3, #9
 80018e6:	d91c      	bls.n	8001922 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68d9      	ldr	r1, [r3, #12]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	3b1e      	subs	r3, #30
 80018fa:	2207      	movs	r2, #7
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	4019      	ands	r1, r3
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6898      	ldr	r0, [r3, #8]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	3b1e      	subs	r3, #30
 8001914:	fa00 f203 	lsl.w	r2, r0, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	e019      	b.n	8001956 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6919      	ldr	r1, [r3, #16]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	2207      	movs	r2, #7
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	4019      	ands	r1, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	6898      	ldr	r0, [r3, #8]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	fa00 f203 	lsl.w	r2, r0, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b10      	cmp	r3, #16
 800195c:	d003      	beq.n	8001966 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001962:	2b11      	cmp	r3, #17
 8001964:	d132      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d125      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d126      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800198c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b10      	cmp	r3, #16
 8001994:	d11a      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a13      	ldr	r2, [pc, #76]	; (80019e8 <HAL_ADC_ConfigChannel+0x1ec>)
 800199c:	fba2 2303 	umull	r2, r3, r2, r3
 80019a0:	0c9a      	lsrs	r2, r3, #18
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019ac:	e002      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	3b01      	subs	r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f9      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x1b2>
 80019ba:	e007      	b.n	80019cc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	f043 0220 	orr.w	r2, r3, #32
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	40012400 	.word	0x40012400
 80019e4:	20000000 	.word	0x20000000
 80019e8:	431bde83 	.word	0x431bde83

080019ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d039      	beq.n	8001a7e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f042 0201 	orr.w	r2, r2, #1
 8001a18:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <ADC_Enable+0x9c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <ADC_Enable+0xa0>)
 8001a20:	fba2 2303 	umull	r2, r3, r2, r3
 8001a24:	0c9b      	lsrs	r3, r3, #18
 8001a26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a28:	e002      	b.n	8001a30 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f9      	bne.n	8001a2a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a36:	f7ff fced 	bl	8001414 <HAL_GetTick>
 8001a3a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a3c:	e018      	b.n	8001a70 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a3e:	f7ff fce9 	bl	8001414 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d911      	bls.n	8001a70 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	f043 0210 	orr.w	r2, r3, #16
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	f043 0201 	orr.w	r2, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e007      	b.n	8001a80 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d1df      	bne.n	8001a3e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	431bde83 	.word	0x431bde83

08001a90 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d127      	bne.n	8001afa <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0201 	bic.w	r2, r2, #1
 8001ab8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001aba:	f7ff fcab 	bl	8001414 <HAL_GetTick>
 8001abe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ac0:	e014      	b.n	8001aec <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ac2:	f7ff fca7 	bl	8001414 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d90d      	bls.n	8001aec <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	f043 0210 	orr.w	r2, r3, #16
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	f043 0201 	orr.w	r2, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e007      	b.n	8001afc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d0e3      	beq.n	8001ac2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d127      	bne.n	8001b6e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b34:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b38:	d115      	bne.n	8001b66 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d111      	bne.n	8001b66 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d105      	bne.n	8001b66 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	f043 0201 	orr.w	r2, r3, #1
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f7fe fc6a 	bl	8000440 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001b6c:	e004      	b.n	8001b78 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	4798      	blx	r3
}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f7ff fe22 	bl	80017d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	f043 0204 	orr.w	r2, r3, #4
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f7ff fe11 	bl	80017ea <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_ADCEx_Calibration_Start+0x1e>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e086      	b.n	8001cfc <HAL_ADCEx_Calibration_Start+0x12c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ff4a 	bl	8001a90 <ADC_ConversionStop_Disable>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d175      	bne.n	8001cf2 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c0e:	f023 0302 	bic.w	r3, r3, #2
 8001c12:	f043 0202 	orr.w	r2, r3, #2
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c1a:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <HAL_ADCEx_Calibration_Start+0x134>)
 8001c1c:	681c      	ldr	r4, [r3, #0]
 8001c1e:	2002      	movs	r0, #2
 8001c20:	f001 f9b6 	bl	8002f90 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c24:	4603      	mov	r3, r0
 8001c26:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001c2a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001c2c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001c2e:	e002      	b.n	8001c36 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f9      	bne.n	8001c30 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff fed5 	bl	80019ec <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0208 	orr.w	r2, r2, #8
 8001c50:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001c52:	f7ff fbdf 	bl	8001414 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c58:	e014      	b.n	8001c84 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c5a:	f7ff fbdb 	bl	8001414 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b0a      	cmp	r3, #10
 8001c66:	d90d      	bls.n	8001c84 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	f023 0312 	bic.w	r3, r3, #18
 8001c70:	f043 0210 	orr.w	r2, r3, #16
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e03b      	b.n	8001cfc <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1e3      	bne.n	8001c5a <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0204 	orr.w	r2, r2, #4
 8001ca0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001ca2:	f7ff fbb7 	bl	8001414 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ca8:	e014      	b.n	8001cd4 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001caa:	f7ff fbb3 	bl	8001414 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b0a      	cmp	r3, #10
 8001cb6:	d90d      	bls.n	8001cd4 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbc:	f023 0312 	bic.w	r3, r3, #18
 8001cc0:	f043 0210 	orr.w	r2, r3, #16
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e013      	b.n	8001cfc <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1e3      	bne.n	8001caa <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	f023 0303 	bic.w	r3, r3, #3
 8001cea:	f043 0201 	orr.w	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	371c      	adds	r7, #28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd90      	pop	{r4, r7, pc}
 8001d04:	20000000 	.word	0x20000000

08001d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db0b      	blt.n	8001d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	4906      	ldr	r1, [pc, #24]	; (8001da0 <__NVIC_EnableIRQ+0x34>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	; (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	; (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
         );
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	; 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <SysTick_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f7ff ff90 	bl	8001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <SysTick_Config+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <SysTick_Config+0x40>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff2d 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff ff42 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff90 	bl	8001df8 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5f 	bl	8001da4 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff35 	bl	8001d6c <__NVIC_EnableIRQ>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ffa2 	bl	8001e5c <SysTick_Config>
 8001f18:	4603      	mov	r3, r0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e043      	b.n	8001fc2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_DMA_Init+0xa8>)
 8001f42:	4413      	add	r3, r2
 8001f44:	4a22      	ldr	r2, [pc, #136]	; (8001fd0 <HAL_DMA_Init+0xac>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	091b      	lsrs	r3, r3, #4
 8001f4c:	009a      	lsls	r2, r3, #2
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a1f      	ldr	r2, [pc, #124]	; (8001fd4 <HAL_DMA_Init+0xb0>)
 8001f56:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	bffdfff8 	.word	0xbffdfff8
 8001fd0:	cccccccd 	.word	0xcccccccd
 8001fd4:	40020000 	.word	0x40020000

08001fd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_DMA_Start_IT+0x20>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e04a      	b.n	800208e <HAL_DMA_Start_IT+0xb6>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002006:	2b01      	cmp	r3, #1
 8002008:	d13a      	bne.n	8002080 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2202      	movs	r2, #2
 800200e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f938 	bl	80022a4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 020e 	orr.w	r2, r2, #14
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	e00f      	b.n	800206e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0204 	bic.w	r2, r2, #4
 800205c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f042 020a 	orr.w	r2, r2, #10
 800206c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0201 	orr.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e005      	b.n	800208c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002088:	2302      	movs	r3, #2
 800208a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800208c:	7dfb      	ldrb	r3, [r7, #23]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	2204      	movs	r2, #4
 80020b6:	409a      	lsls	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d04f      	beq.n	8002160 <HAL_DMA_IRQHandler+0xc8>
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d04a      	beq.n	8002160 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d107      	bne.n	80020e8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0204 	bic.w	r2, r2, #4
 80020e6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a66      	ldr	r2, [pc, #408]	; (8002288 <HAL_DMA_IRQHandler+0x1f0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d029      	beq.n	8002146 <HAL_DMA_IRQHandler+0xae>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a65      	ldr	r2, [pc, #404]	; (800228c <HAL_DMA_IRQHandler+0x1f4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d022      	beq.n	8002142 <HAL_DMA_IRQHandler+0xaa>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a63      	ldr	r2, [pc, #396]	; (8002290 <HAL_DMA_IRQHandler+0x1f8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01a      	beq.n	800213c <HAL_DMA_IRQHandler+0xa4>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a62      	ldr	r2, [pc, #392]	; (8002294 <HAL_DMA_IRQHandler+0x1fc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d012      	beq.n	8002136 <HAL_DMA_IRQHandler+0x9e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a60      	ldr	r2, [pc, #384]	; (8002298 <HAL_DMA_IRQHandler+0x200>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00a      	beq.n	8002130 <HAL_DMA_IRQHandler+0x98>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a5f      	ldr	r2, [pc, #380]	; (800229c <HAL_DMA_IRQHandler+0x204>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d102      	bne.n	800212a <HAL_DMA_IRQHandler+0x92>
 8002124:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002128:	e00e      	b.n	8002148 <HAL_DMA_IRQHandler+0xb0>
 800212a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800212e:	e00b      	b.n	8002148 <HAL_DMA_IRQHandler+0xb0>
 8002130:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002134:	e008      	b.n	8002148 <HAL_DMA_IRQHandler+0xb0>
 8002136:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800213a:	e005      	b.n	8002148 <HAL_DMA_IRQHandler+0xb0>
 800213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002140:	e002      	b.n	8002148 <HAL_DMA_IRQHandler+0xb0>
 8002142:	2340      	movs	r3, #64	; 0x40
 8002144:	e000      	b.n	8002148 <HAL_DMA_IRQHandler+0xb0>
 8002146:	2304      	movs	r3, #4
 8002148:	4a55      	ldr	r2, [pc, #340]	; (80022a0 <HAL_DMA_IRQHandler+0x208>)
 800214a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 8094 	beq.w	800227e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800215e:	e08e      	b.n	800227e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	2202      	movs	r2, #2
 8002166:	409a      	lsls	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d056      	beq.n	800221e <HAL_DMA_IRQHandler+0x186>
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d051      	beq.n	800221e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10b      	bne.n	80021a0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 020a 	bic.w	r2, r2, #10
 8002196:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a38      	ldr	r2, [pc, #224]	; (8002288 <HAL_DMA_IRQHandler+0x1f0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d029      	beq.n	80021fe <HAL_DMA_IRQHandler+0x166>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a37      	ldr	r2, [pc, #220]	; (800228c <HAL_DMA_IRQHandler+0x1f4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d022      	beq.n	80021fa <HAL_DMA_IRQHandler+0x162>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a35      	ldr	r2, [pc, #212]	; (8002290 <HAL_DMA_IRQHandler+0x1f8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d01a      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x15c>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a34      	ldr	r2, [pc, #208]	; (8002294 <HAL_DMA_IRQHandler+0x1fc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d012      	beq.n	80021ee <HAL_DMA_IRQHandler+0x156>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a32      	ldr	r2, [pc, #200]	; (8002298 <HAL_DMA_IRQHandler+0x200>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00a      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x150>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a31      	ldr	r2, [pc, #196]	; (800229c <HAL_DMA_IRQHandler+0x204>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d102      	bne.n	80021e2 <HAL_DMA_IRQHandler+0x14a>
 80021dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021e0:	e00e      	b.n	8002200 <HAL_DMA_IRQHandler+0x168>
 80021e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021e6:	e00b      	b.n	8002200 <HAL_DMA_IRQHandler+0x168>
 80021e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ec:	e008      	b.n	8002200 <HAL_DMA_IRQHandler+0x168>
 80021ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f2:	e005      	b.n	8002200 <HAL_DMA_IRQHandler+0x168>
 80021f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021f8:	e002      	b.n	8002200 <HAL_DMA_IRQHandler+0x168>
 80021fa:	2320      	movs	r3, #32
 80021fc:	e000      	b.n	8002200 <HAL_DMA_IRQHandler+0x168>
 80021fe:	2302      	movs	r3, #2
 8002200:	4a27      	ldr	r2, [pc, #156]	; (80022a0 <HAL_DMA_IRQHandler+0x208>)
 8002202:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	2b00      	cmp	r3, #0
 8002212:	d034      	beq.n	800227e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800221c:	e02f      	b.n	800227e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	2208      	movs	r2, #8
 8002224:	409a      	lsls	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d028      	beq.n	8002280 <HAL_DMA_IRQHandler+0x1e8>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d023      	beq.n	8002280 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 020e 	bic.w	r2, r2, #14
 8002246:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002250:	2101      	movs	r1, #1
 8002252:	fa01 f202 	lsl.w	r2, r1, r2
 8002256:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	4798      	blx	r3
    }
  }
  return;
 800227e:	bf00      	nop
 8002280:	bf00      	nop
}
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40020008 	.word	0x40020008
 800228c:	4002001c 	.word	0x4002001c
 8002290:	40020030 	.word	0x40020030
 8002294:	40020044 	.word	0x40020044
 8002298:	40020058 	.word	0x40020058
 800229c:	4002006c 	.word	0x4002006c
 80022a0:	40020000 	.word	0x40020000

080022a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ba:	2101      	movs	r1, #1
 80022bc:	fa01 f202 	lsl.w	r2, r1, r2
 80022c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d108      	bne.n	80022e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022e2:	e007      	b.n	80022f4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	60da      	str	r2, [r3, #12]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
	...

08002300 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002300:	b480      	push	{r7}
 8002302:	b08b      	sub	sp, #44	; 0x2c
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800230a:	2300      	movs	r3, #0
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002312:	e127      	b.n	8002564 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002314:	2201      	movs	r2, #1
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 8116 	bne.w	800255e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b12      	cmp	r3, #18
 8002338:	d034      	beq.n	80023a4 <HAL_GPIO_Init+0xa4>
 800233a:	2b12      	cmp	r3, #18
 800233c:	d80d      	bhi.n	800235a <HAL_GPIO_Init+0x5a>
 800233e:	2b02      	cmp	r3, #2
 8002340:	d02b      	beq.n	800239a <HAL_GPIO_Init+0x9a>
 8002342:	2b02      	cmp	r3, #2
 8002344:	d804      	bhi.n	8002350 <HAL_GPIO_Init+0x50>
 8002346:	2b00      	cmp	r3, #0
 8002348:	d031      	beq.n	80023ae <HAL_GPIO_Init+0xae>
 800234a:	2b01      	cmp	r3, #1
 800234c:	d01c      	beq.n	8002388 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800234e:	e048      	b.n	80023e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002350:	2b03      	cmp	r3, #3
 8002352:	d043      	beq.n	80023dc <HAL_GPIO_Init+0xdc>
 8002354:	2b11      	cmp	r3, #17
 8002356:	d01b      	beq.n	8002390 <HAL_GPIO_Init+0x90>
          break;
 8002358:	e043      	b.n	80023e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800235a:	4a89      	ldr	r2, [pc, #548]	; (8002580 <HAL_GPIO_Init+0x280>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d026      	beq.n	80023ae <HAL_GPIO_Init+0xae>
 8002360:	4a87      	ldr	r2, [pc, #540]	; (8002580 <HAL_GPIO_Init+0x280>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d806      	bhi.n	8002374 <HAL_GPIO_Init+0x74>
 8002366:	4a87      	ldr	r2, [pc, #540]	; (8002584 <HAL_GPIO_Init+0x284>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d020      	beq.n	80023ae <HAL_GPIO_Init+0xae>
 800236c:	4a86      	ldr	r2, [pc, #536]	; (8002588 <HAL_GPIO_Init+0x288>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d01d      	beq.n	80023ae <HAL_GPIO_Init+0xae>
          break;
 8002372:	e036      	b.n	80023e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002374:	4a85      	ldr	r2, [pc, #532]	; (800258c <HAL_GPIO_Init+0x28c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d019      	beq.n	80023ae <HAL_GPIO_Init+0xae>
 800237a:	4a85      	ldr	r2, [pc, #532]	; (8002590 <HAL_GPIO_Init+0x290>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d016      	beq.n	80023ae <HAL_GPIO_Init+0xae>
 8002380:	4a84      	ldr	r2, [pc, #528]	; (8002594 <HAL_GPIO_Init+0x294>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d013      	beq.n	80023ae <HAL_GPIO_Init+0xae>
          break;
 8002386:	e02c      	b.n	80023e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	623b      	str	r3, [r7, #32]
          break;
 800238e:	e028      	b.n	80023e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	3304      	adds	r3, #4
 8002396:	623b      	str	r3, [r7, #32]
          break;
 8002398:	e023      	b.n	80023e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	3308      	adds	r3, #8
 80023a0:	623b      	str	r3, [r7, #32]
          break;
 80023a2:	e01e      	b.n	80023e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	330c      	adds	r3, #12
 80023aa:	623b      	str	r3, [r7, #32]
          break;
 80023ac:	e019      	b.n	80023e2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023b6:	2304      	movs	r3, #4
 80023b8:	623b      	str	r3, [r7, #32]
          break;
 80023ba:	e012      	b.n	80023e2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023c4:	2308      	movs	r3, #8
 80023c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	611a      	str	r2, [r3, #16]
          break;
 80023ce:	e008      	b.n	80023e2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d0:	2308      	movs	r3, #8
 80023d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	615a      	str	r2, [r3, #20]
          break;
 80023da:	e002      	b.n	80023e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023dc:	2300      	movs	r3, #0
 80023de:	623b      	str	r3, [r7, #32]
          break;
 80023e0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2bff      	cmp	r3, #255	; 0xff
 80023e6:	d801      	bhi.n	80023ec <HAL_GPIO_Init+0xec>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	e001      	b.n	80023f0 <HAL_GPIO_Init+0xf0>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3304      	adds	r3, #4
 80023f0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	2bff      	cmp	r3, #255	; 0xff
 80023f6:	d802      	bhi.n	80023fe <HAL_GPIO_Init+0xfe>
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	e002      	b.n	8002404 <HAL_GPIO_Init+0x104>
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	3b08      	subs	r3, #8
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	210f      	movs	r1, #15
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	401a      	ands	r2, r3
 8002416:	6a39      	ldr	r1, [r7, #32]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	431a      	orrs	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 8096 	beq.w	800255e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002432:	4b59      	ldr	r3, [pc, #356]	; (8002598 <HAL_GPIO_Init+0x298>)
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	4a58      	ldr	r2, [pc, #352]	; (8002598 <HAL_GPIO_Init+0x298>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6193      	str	r3, [r2, #24]
 800243e:	4b56      	ldr	r3, [pc, #344]	; (8002598 <HAL_GPIO_Init+0x298>)
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800244a:	4a54      	ldr	r2, [pc, #336]	; (800259c <HAL_GPIO_Init+0x29c>)
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	089b      	lsrs	r3, r3, #2
 8002450:	3302      	adds	r3, #2
 8002452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002456:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	220f      	movs	r2, #15
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4013      	ands	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4b      	ldr	r2, [pc, #300]	; (80025a0 <HAL_GPIO_Init+0x2a0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d013      	beq.n	800249e <HAL_GPIO_Init+0x19e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4a      	ldr	r2, [pc, #296]	; (80025a4 <HAL_GPIO_Init+0x2a4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00d      	beq.n	800249a <HAL_GPIO_Init+0x19a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a49      	ldr	r2, [pc, #292]	; (80025a8 <HAL_GPIO_Init+0x2a8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d007      	beq.n	8002496 <HAL_GPIO_Init+0x196>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a48      	ldr	r2, [pc, #288]	; (80025ac <HAL_GPIO_Init+0x2ac>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d101      	bne.n	8002492 <HAL_GPIO_Init+0x192>
 800248e:	2303      	movs	r3, #3
 8002490:	e006      	b.n	80024a0 <HAL_GPIO_Init+0x1a0>
 8002492:	2304      	movs	r3, #4
 8002494:	e004      	b.n	80024a0 <HAL_GPIO_Init+0x1a0>
 8002496:	2302      	movs	r3, #2
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_Init+0x1a0>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_Init+0x1a0>
 800249e:	2300      	movs	r3, #0
 80024a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a2:	f002 0203 	and.w	r2, r2, #3
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	4093      	lsls	r3, r2
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024b0:	493a      	ldr	r1, [pc, #232]	; (800259c <HAL_GPIO_Init+0x29c>)
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	3302      	adds	r3, #2
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d006      	beq.n	80024d8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024ca:	4b39      	ldr	r3, [pc, #228]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	4938      	ldr	r1, [pc, #224]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]
 80024d6:	e006      	b.n	80024e6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024d8:	4b35      	ldr	r3, [pc, #212]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	43db      	mvns	r3, r3
 80024e0:	4933      	ldr	r1, [pc, #204]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d006      	beq.n	8002500 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024f2:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	492e      	ldr	r1, [pc, #184]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
 80024fe:	e006      	b.n	800250e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002500:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	43db      	mvns	r3, r3
 8002508:	4929      	ldr	r1, [pc, #164]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 800250a:	4013      	ands	r3, r2
 800250c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d006      	beq.n	8002528 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800251a:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	4924      	ldr	r1, [pc, #144]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
 8002526:	e006      	b.n	8002536 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	43db      	mvns	r3, r3
 8002530:	491f      	ldr	r1, [pc, #124]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 8002532:	4013      	ands	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d006      	beq.n	8002550 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	491a      	ldr	r1, [pc, #104]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	60cb      	str	r3, [r1, #12]
 800254e:	e006      	b.n	800255e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002550:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	43db      	mvns	r3, r3
 8002558:	4915      	ldr	r1, [pc, #84]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 800255a:	4013      	ands	r3, r2
 800255c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	3301      	adds	r3, #1
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	fa22 f303 	lsr.w	r3, r2, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	f47f aed0 	bne.w	8002314 <HAL_GPIO_Init+0x14>
  }
}
 8002574:	bf00      	nop
 8002576:	372c      	adds	r7, #44	; 0x2c
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	10210000 	.word	0x10210000
 8002584:	10110000 	.word	0x10110000
 8002588:	10120000 	.word	0x10120000
 800258c:	10310000 	.word	0x10310000
 8002590:	10320000 	.word	0x10320000
 8002594:	10220000 	.word	0x10220000
 8002598:	40021000 	.word	0x40021000
 800259c:	40010000 	.word	0x40010000
 80025a0:	40010800 	.word	0x40010800
 80025a4:	40010c00 	.word	0x40010c00
 80025a8:	40011000 	.word	0x40011000
 80025ac:	40011400 	.word	0x40011400
 80025b0:	40010400 	.word	0x40010400

080025b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
 80025d0:	e001      	b.n	80025d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	807b      	strh	r3, [r7, #2]
 80025ee:	4613      	mov	r3, r2
 80025f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025f2:	787b      	ldrb	r3, [r7, #1]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025f8:	887a      	ldrh	r2, [r7, #2]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025fe:	e003      	b.n	8002608 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002600:	887b      	ldrh	r3, [r7, #2]
 8002602:	041a      	lsls	r2, r3, #16
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	611a      	str	r2, [r3, #16]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
	...

08002614 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e26c      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8087 	beq.w	8002742 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002634:	4b92      	ldr	r3, [pc, #584]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b04      	cmp	r3, #4
 800263e:	d00c      	beq.n	800265a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002640:	4b8f      	ldr	r3, [pc, #572]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	2b08      	cmp	r3, #8
 800264a:	d112      	bne.n	8002672 <HAL_RCC_OscConfig+0x5e>
 800264c:	4b8c      	ldr	r3, [pc, #560]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d10b      	bne.n	8002672 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265a:	4b89      	ldr	r3, [pc, #548]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d06c      	beq.n	8002740 <HAL_RCC_OscConfig+0x12c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d168      	bne.n	8002740 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e246      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267a:	d106      	bne.n	800268a <HAL_RCC_OscConfig+0x76>
 800267c:	4b80      	ldr	r3, [pc, #512]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a7f      	ldr	r2, [pc, #508]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	e02e      	b.n	80026e8 <HAL_RCC_OscConfig+0xd4>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0x98>
 8002692:	4b7b      	ldr	r3, [pc, #492]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a7a      	ldr	r2, [pc, #488]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	4b78      	ldr	r3, [pc, #480]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a77      	ldr	r2, [pc, #476]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e01d      	b.n	80026e8 <HAL_RCC_OscConfig+0xd4>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0xbc>
 80026b6:	4b72      	ldr	r3, [pc, #456]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a71      	ldr	r2, [pc, #452]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b6f      	ldr	r3, [pc, #444]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a6e      	ldr	r2, [pc, #440]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e00b      	b.n	80026e8 <HAL_RCC_OscConfig+0xd4>
 80026d0:	4b6b      	ldr	r3, [pc, #428]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a6a      	ldr	r2, [pc, #424]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b68      	ldr	r3, [pc, #416]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a67      	ldr	r2, [pc, #412]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d013      	beq.n	8002718 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f0:	f7fe fe90 	bl	8001414 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f8:	f7fe fe8c 	bl	8001414 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	; 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e1fa      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	4b5d      	ldr	r3, [pc, #372]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0xe4>
 8002716:	e014      	b.n	8002742 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7fe fe7c 	bl	8001414 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002720:	f7fe fe78 	bl	8001414 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b64      	cmp	r3, #100	; 0x64
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e1e6      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002732:	4b53      	ldr	r3, [pc, #332]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x10c>
 800273e:	e000      	b.n	8002742 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d063      	beq.n	8002816 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800274e:	4b4c      	ldr	r3, [pc, #304]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800275a:	4b49      	ldr	r3, [pc, #292]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b08      	cmp	r3, #8
 8002764:	d11c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x18c>
 8002766:	4b46      	ldr	r3, [pc, #280]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d116      	bne.n	80027a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002772:	4b43      	ldr	r3, [pc, #268]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <HAL_RCC_OscConfig+0x176>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d001      	beq.n	800278a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e1ba      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278a:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4939      	ldr	r1, [pc, #228]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800279a:	4313      	orrs	r3, r2
 800279c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279e:	e03a      	b.n	8002816 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d020      	beq.n	80027ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a8:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ae:	f7fe fe31 	bl	8001414 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b6:	f7fe fe2d 	bl	8001414 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e19b      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c8:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d4:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4927      	ldr	r1, [pc, #156]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	600b      	str	r3, [r1, #0]
 80027e8:	e015      	b.n	8002816 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ea:	4b26      	ldr	r3, [pc, #152]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7fe fe10 	bl	8001414 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f8:	f7fe fe0c 	bl	8001414 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e17a      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280a:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d03a      	beq.n	8002898 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d019      	beq.n	800285e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282a:	4b17      	ldr	r3, [pc, #92]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 800282c:	2201      	movs	r2, #1
 800282e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002830:	f7fe fdf0 	bl	8001414 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002838:	f7fe fdec 	bl	8001414 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e15a      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002856:	2001      	movs	r0, #1
 8002858:	f000 fac6 	bl	8002de8 <RCC_Delay>
 800285c:	e01c      	b.n	8002898 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002864:	f7fe fdd6 	bl	8001414 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286a:	e00f      	b.n	800288c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286c:	f7fe fdd2 	bl	8001414 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d908      	bls.n	800288c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e140      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	42420000 	.word	0x42420000
 8002888:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288c:	4b9e      	ldr	r3, [pc, #632]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1e9      	bne.n	800286c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80a6 	beq.w	80029f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a6:	2300      	movs	r3, #0
 80028a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028aa:	4b97      	ldr	r3, [pc, #604]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10d      	bne.n	80028d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b6:	4b94      	ldr	r3, [pc, #592]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	4a93      	ldr	r2, [pc, #588]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c0:	61d3      	str	r3, [r2, #28]
 80028c2:	4b91      	ldr	r3, [pc, #580]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ce:	2301      	movs	r3, #1
 80028d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d2:	4b8e      	ldr	r3, [pc, #568]	; (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d118      	bne.n	8002910 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028de:	4b8b      	ldr	r3, [pc, #556]	; (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a8a      	ldr	r2, [pc, #552]	; (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80028e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ea:	f7fe fd93 	bl	8001414 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f2:	f7fe fd8f 	bl	8001414 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b64      	cmp	r3, #100	; 0x64
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e0fd      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	4b81      	ldr	r3, [pc, #516]	; (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x312>
 8002918:	4b7b      	ldr	r3, [pc, #492]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	4a7a      	ldr	r2, [pc, #488]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6213      	str	r3, [r2, #32]
 8002924:	e02d      	b.n	8002982 <HAL_RCC_OscConfig+0x36e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10c      	bne.n	8002948 <HAL_RCC_OscConfig+0x334>
 800292e:	4b76      	ldr	r3, [pc, #472]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	4a75      	ldr	r2, [pc, #468]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	6213      	str	r3, [r2, #32]
 800293a:	4b73      	ldr	r3, [pc, #460]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	4a72      	ldr	r2, [pc, #456]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002940:	f023 0304 	bic.w	r3, r3, #4
 8002944:	6213      	str	r3, [r2, #32]
 8002946:	e01c      	b.n	8002982 <HAL_RCC_OscConfig+0x36e>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b05      	cmp	r3, #5
 800294e:	d10c      	bne.n	800296a <HAL_RCC_OscConfig+0x356>
 8002950:	4b6d      	ldr	r3, [pc, #436]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4a6c      	ldr	r2, [pc, #432]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002956:	f043 0304 	orr.w	r3, r3, #4
 800295a:	6213      	str	r3, [r2, #32]
 800295c:	4b6a      	ldr	r3, [pc, #424]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4a69      	ldr	r2, [pc, #420]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6213      	str	r3, [r2, #32]
 8002968:	e00b      	b.n	8002982 <HAL_RCC_OscConfig+0x36e>
 800296a:	4b67      	ldr	r3, [pc, #412]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	4a66      	ldr	r2, [pc, #408]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	6213      	str	r3, [r2, #32]
 8002976:	4b64      	ldr	r3, [pc, #400]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	4a63      	ldr	r2, [pc, #396]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800297c:	f023 0304 	bic.w	r3, r3, #4
 8002980:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d015      	beq.n	80029b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298a:	f7fe fd43 	bl	8001414 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002990:	e00a      	b.n	80029a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002992:	f7fe fd3f 	bl	8001414 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e0ab      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a8:	4b57      	ldr	r3, [pc, #348]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0ee      	beq.n	8002992 <HAL_RCC_OscConfig+0x37e>
 80029b4:	e014      	b.n	80029e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b6:	f7fe fd2d 	bl	8001414 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fe fd29 	bl	8001414 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e095      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d4:	4b4c      	ldr	r3, [pc, #304]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1ee      	bne.n	80029be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029e0:	7dfb      	ldrb	r3, [r7, #23]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d105      	bne.n	80029f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e6:	4b48      	ldr	r3, [pc, #288]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4a47      	ldr	r2, [pc, #284]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80029ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8081 	beq.w	8002afe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029fc:	4b42      	ldr	r3, [pc, #264]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d061      	beq.n	8002acc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d146      	bne.n	8002a9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a10:	4b3f      	ldr	r3, [pc, #252]	; (8002b10 <HAL_RCC_OscConfig+0x4fc>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a16:	f7fe fcfd 	bl	8001414 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1e:	f7fe fcf9 	bl	8001414 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e067      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a30:	4b35      	ldr	r3, [pc, #212]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f0      	bne.n	8002a1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a44:	d108      	bne.n	8002a58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a46:	4b30      	ldr	r3, [pc, #192]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	492d      	ldr	r1, [pc, #180]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a58:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a19      	ldr	r1, [r3, #32]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	4927      	ldr	r1, [pc, #156]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a70:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <HAL_RCC_OscConfig+0x4fc>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a76:	f7fe fccd 	bl	8001414 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7e:	f7fe fcc9 	bl	8001414 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e037      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a90:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x46a>
 8002a9c:	e02f      	b.n	8002afe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <HAL_RCC_OscConfig+0x4fc>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7fe fcb6 	bl	8001414 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aac:	f7fe fcb2 	bl	8001414 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e020      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002abe:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x498>
 8002aca:	e018      	b.n	8002afe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e013      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d106      	bne.n	8002afa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d001      	beq.n	8002afe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40007000 	.word	0x40007000
 8002b10:	42420060 	.word	0x42420060

08002b14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0d0      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b28:	4b6a      	ldr	r3, [pc, #424]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d910      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b67      	ldr	r3, [pc, #412]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 0207 	bic.w	r2, r3, #7
 8002b3e:	4965      	ldr	r1, [pc, #404]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b63      	ldr	r3, [pc, #396]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0b8      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b70:	4b59      	ldr	r3, [pc, #356]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4a58      	ldr	r2, [pc, #352]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b88:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	4a52      	ldr	r2, [pc, #328]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b94:	4b50      	ldr	r3, [pc, #320]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	494d      	ldr	r1, [pc, #308]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d040      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d115      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e07f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd2:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e073      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be2:	4b3d      	ldr	r3, [pc, #244]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e06b      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bf2:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f023 0203 	bic.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	4936      	ldr	r1, [pc, #216]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c04:	f7fe fc06 	bl	8001414 <HAL_GetTick>
 8002c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0c:	f7fe fc02 	bl	8001414 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e053      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	4b2d      	ldr	r3, [pc, #180]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 020c 	and.w	r2, r3, #12
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d1eb      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c34:	4b27      	ldr	r3, [pc, #156]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d210      	bcs.n	8002c64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 0207 	bic.w	r2, r3, #7
 8002c4a:	4922      	ldr	r1, [pc, #136]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e032      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4916      	ldr	r1, [pc, #88]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c8e:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	490e      	ldr	r1, [pc, #56]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ca2:	f000 f821 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 8002ca6:	4601      	mov	r1, r0
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <HAL_RCC_ClockConfig+0x1c8>)
 8002cb4:	5cd3      	ldrb	r3, [r2, r3]
 8002cb6:	fa21 f303 	lsr.w	r3, r1, r3
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <HAL_RCC_ClockConfig+0x1cc>)
 8002cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCC_ClockConfig+0x1d0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe fb64 	bl	8001390 <HAL_InitTick>

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40022000 	.word	0x40022000
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	08004444 	.word	0x08004444
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	20000004 	.word	0x20000004

08002ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce8:	b490      	push	{r4, r7}
 8002cea:	b08a      	sub	sp, #40	; 0x28
 8002cec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cee:	4b2a      	ldr	r3, [pc, #168]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cf0:	1d3c      	adds	r4, r7, #4
 8002cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cf8:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d12:	4b23      	ldr	r3, [pc, #140]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d002      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x40>
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d003      	beq.n	8002d2e <HAL_RCC_GetSysClockFreq+0x46>
 8002d26:	e02d      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d28:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d2a:	623b      	str	r3, [r7, #32]
      break;
 8002d2c:	e02d      	b.n	8002d8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	0c9b      	lsrs	r3, r3, #18
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d40:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d4c:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	0c5b      	lsrs	r3, r3, #17
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d60:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	4a0f      	ldr	r2, [pc, #60]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d66:	fb02 f203 	mul.w	r2, r2, r3
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
 8002d72:	e004      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	4a0c      	ldr	r2, [pc, #48]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d78:	fb02 f303 	mul.w	r3, r2, r3
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	623b      	str	r3, [r7, #32]
      break;
 8002d82:	e002      	b.n	8002d8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d84:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d86:	623b      	str	r3, [r7, #32]
      break;
 8002d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3728      	adds	r7, #40	; 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc90      	pop	{r4, r7}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	0800441c 	.word	0x0800441c
 8002d9c:	0800442c 	.word	0x0800442c
 8002da0:	40021000 	.word	0x40021000
 8002da4:	007a1200 	.word	0x007a1200
 8002da8:	003d0900 	.word	0x003d0900

08002dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db0:	4b02      	ldr	r3, [pc, #8]	; (8002dbc <HAL_RCC_GetHCLKFreq+0x10>)
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	20000000 	.word	0x20000000

08002dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dc4:	f7ff fff2 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002dc8:	4601      	mov	r1, r0
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	0adb      	lsrs	r3, r3, #11
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	4a03      	ldr	r2, [pc, #12]	; (8002de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dd6:	5cd3      	ldrb	r3, [r2, r3]
 8002dd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	08004454 	.word	0x08004454

08002de8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <RCC_Delay+0x34>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0a      	ldr	r2, [pc, #40]	; (8002e20 <RCC_Delay+0x38>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	0a5b      	lsrs	r3, r3, #9
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e04:	bf00      	nop
  }
  while (Delay --);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1e5a      	subs	r2, r3, #1
 8002e0a:	60fa      	str	r2, [r7, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f9      	bne.n	8002e04 <RCC_Delay+0x1c>
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	10624dd3 	.word	0x10624dd3

08002e24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d07d      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002e40:	2300      	movs	r3, #0
 8002e42:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e44:	4b4f      	ldr	r3, [pc, #316]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10d      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e50:	4b4c      	ldr	r3, [pc, #304]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	4a4b      	ldr	r2, [pc, #300]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	61d3      	str	r3, [r2, #28]
 8002e5c:	4b49      	ldr	r3, [pc, #292]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6c:	4b46      	ldr	r3, [pc, #280]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d118      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e78:	4b43      	ldr	r3, [pc, #268]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a42      	ldr	r2, [pc, #264]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e84:	f7fe fac6 	bl	8001414 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8a:	e008      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8c:	f7fe fac2 	bl	8001414 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	; 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e06d      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9e:	4b3a      	ldr	r3, [pc, #232]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eaa:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d02e      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d027      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ec8:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ed2:	4b2e      	ldr	r3, [pc, #184]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed8:	4b2c      	ldr	r3, [pc, #176]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ede:	4a29      	ldr	r2, [pc, #164]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d014      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eee:	f7fe fa91 	bl	8001414 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef6:	f7fe fa8d 	bl	8001414 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e036      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0ee      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f18:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4917      	ldr	r1, [pc, #92]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d105      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f48:	4b0e      	ldr	r3, [pc, #56]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	490b      	ldr	r1, [pc, #44]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f66:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	4904      	ldr	r1, [pc, #16]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40007000 	.word	0x40007000
 8002f8c:	42420440 	.word	0x42420440

08002f90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b08d      	sub	sp, #52	; 0x34
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f98:	4b55      	ldr	r3, [pc, #340]	; (80030f0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002f9a:	f107 040c 	add.w	r4, r7, #12
 8002f9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fa4:	4b53      	ldr	r3, [pc, #332]	; (80030f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
 8002fae:	2300      	movs	r3, #0
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d07f      	beq.n	80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002fc4:	2b10      	cmp	r3, #16
 8002fc6:	d002      	beq.n	8002fce <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d048      	beq.n	800305e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002fcc:	e08b      	b.n	80030e6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002fce:	4b4a      	ldr	r3, [pc, #296]	; (80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002fd4:	4b48      	ldr	r3, [pc, #288]	; (80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d07f      	beq.n	80030e0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	0c9b      	lsrs	r3, r3, #18
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002fec:	4413      	add	r3, r2
 8002fee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ff2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d018      	beq.n	8003030 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ffe:	4b3e      	ldr	r3, [pc, #248]	; (80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	0c5b      	lsrs	r3, r3, #17
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800300c:	4413      	add	r3, r2
 800300e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00d      	beq.n	800303a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800301e:	4a37      	ldr	r2, [pc, #220]	; (80030fc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	fbb2 f2f3 	udiv	r2, r2, r3
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	fb02 f303 	mul.w	r3, r2, r3
 800302c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800302e:	e004      	b.n	800303a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	4a33      	ldr	r2, [pc, #204]	; (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003034:	fb02 f303 	mul.w	r3, r2, r3
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800303a:	4b2f      	ldr	r3, [pc, #188]	; (80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003046:	d102      	bne.n	800304e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800304c:	e048      	b.n	80030e0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4a2c      	ldr	r2, [pc, #176]	; (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003054:	fba2 2303 	umull	r2, r3, r2, r3
 8003058:	085b      	lsrs	r3, r3, #1
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800305c:	e040      	b.n	80030e0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800305e:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800306e:	d108      	bne.n	8003082 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800307a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800307e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003080:	e01f      	b.n	80030c2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800308c:	d109      	bne.n	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800308e:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800309a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800309e:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a0:	e00f      	b.n	80030c2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ac:	d11a      	bne.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80030ae:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d014      	beq.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80030ba:	f24f 4324 	movw	r3, #62500	; 0xf424
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80030c0:	e010      	b.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80030c2:	e00f      	b.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80030c4:	f7ff fe7c 	bl	8002dc0 <HAL_RCC_GetPCLK2Freq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	0b9b      	lsrs	r3, r3, #14
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	3301      	adds	r3, #1
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80030de:	e002      	b.n	80030e6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80030e0:	bf00      	nop
 80030e2:	e000      	b.n	80030e6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80030e4:	bf00      	nop
    }
  }
  return (frequency);
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3734      	adds	r7, #52	; 0x34
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd90      	pop	{r4, r7, pc}
 80030f0:	08004430 	.word	0x08004430
 80030f4:	08004440 	.word	0x08004440
 80030f8:	40021000 	.word	0x40021000
 80030fc:	007a1200 	.word	0x007a1200
 8003100:	003d0900 	.word	0x003d0900
 8003104:	aaaaaaab 	.word	0xaaaaaaab

08003108 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e076      	b.n	8003208 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	2b00      	cmp	r3, #0
 8003120:	d108      	bne.n	8003134 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800312a:	d009      	beq.n	8003140 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	61da      	str	r2, [r3, #28]
 8003132:	e005      	b.n	8003140 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fd ff2a 	bl	8000fb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003176:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c4:	ea42 0103 	orr.w	r1, r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	0c1a      	lsrs	r2, r3, #16
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f002 0204 	and.w	r2, r2, #4
 80031e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69da      	ldr	r2, [r3, #28]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_SPI_Transmit+0x22>
 800322e:	2302      	movs	r3, #2
 8003230:	e126      	b.n	8003480 <HAL_SPI_Transmit+0x270>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800323a:	f7fe f8eb 	bl	8001414 <HAL_GetTick>
 800323e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d002      	beq.n	8003256 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003250:	2302      	movs	r3, #2
 8003252:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003254:	e10b      	b.n	800346e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <HAL_SPI_Transmit+0x52>
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003266:	e102      	b.n	800346e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2203      	movs	r2, #3
 800326c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	88fa      	ldrh	r2, [r7, #6]
 8003280:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	88fa      	ldrh	r2, [r7, #6]
 8003286:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ae:	d10f      	bne.n	80032d0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032da:	2b40      	cmp	r3, #64	; 0x40
 80032dc:	d007      	beq.n	80032ee <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f6:	d14b      	bne.n	8003390 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <HAL_SPI_Transmit+0xf6>
 8003300:	8afb      	ldrh	r3, [r7, #22]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d13e      	bne.n	8003384 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	881a      	ldrh	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	1c9a      	adds	r2, r3, #2
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800332a:	e02b      	b.n	8003384 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b02      	cmp	r3, #2
 8003338:	d112      	bne.n	8003360 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	881a      	ldrh	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	1c9a      	adds	r2, r3, #2
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	86da      	strh	r2, [r3, #54]	; 0x36
 800335e:	e011      	b.n	8003384 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003360:	f7fe f858 	bl	8001414 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d803      	bhi.n	8003378 <HAL_SPI_Transmit+0x168>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003376:	d102      	bne.n	800337e <HAL_SPI_Transmit+0x16e>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d102      	bne.n	8003384 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003382:	e074      	b.n	800346e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1ce      	bne.n	800332c <HAL_SPI_Transmit+0x11c>
 800338e:	e04c      	b.n	800342a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <HAL_SPI_Transmit+0x18e>
 8003398:	8afb      	ldrh	r3, [r7, #22]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d140      	bne.n	8003420 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	330c      	adds	r3, #12
 80033a8:	7812      	ldrb	r2, [r2, #0]
 80033aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033c4:	e02c      	b.n	8003420 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d113      	bne.n	80033fc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	330c      	adds	r3, #12
 80033de:	7812      	ldrb	r2, [r2, #0]
 80033e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80033fa:	e011      	b.n	8003420 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033fc:	f7fe f80a 	bl	8001414 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d803      	bhi.n	8003414 <HAL_SPI_Transmit+0x204>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d102      	bne.n	800341a <HAL_SPI_Transmit+0x20a>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d102      	bne.n	8003420 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800341e:	e026      	b.n	800346e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1cd      	bne.n	80033c6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	6839      	ldr	r1, [r7, #0]
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f8b2 	bl	8003598 <SPI_EndRxTxTransaction>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10a      	bne.n	800345e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003448:	2300      	movs	r3, #0
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	77fb      	strb	r3, [r7, #31]
 800346a:	e000      	b.n	800346e <HAL_SPI_Transmit+0x25e>
  }

error:
 800346c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800347e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3720      	adds	r7, #32
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003498:	f7fd ffbc 	bl	8001414 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	4413      	add	r3, r2
 80034a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034a8:	f7fd ffb4 	bl	8001414 <HAL_GetTick>
 80034ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034ae:	4b39      	ldr	r3, [pc, #228]	; (8003594 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	015b      	lsls	r3, r3, #5
 80034b4:	0d1b      	lsrs	r3, r3, #20
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	fb02 f303 	mul.w	r3, r2, r3
 80034bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034be:	e054      	b.n	800356a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c6:	d050      	beq.n	800356a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034c8:	f7fd ffa4 	bl	8001414 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d902      	bls.n	80034de <SPI_WaitFlagStateUntilTimeout+0x56>
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d13d      	bne.n	800355a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034f6:	d111      	bne.n	800351c <SPI_WaitFlagStateUntilTimeout+0x94>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003500:	d004      	beq.n	800350c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800350a:	d107      	bne.n	800351c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800351a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003524:	d10f      	bne.n	8003546 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003544:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e017      	b.n	800358a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	3b01      	subs	r3, #1
 8003568:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4013      	ands	r3, r2
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	bf0c      	ite	eq
 800357a:	2301      	moveq	r3, #1
 800357c:	2300      	movne	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	429a      	cmp	r2, r3
 8003586:	d19b      	bne.n	80034c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3720      	adds	r7, #32
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000000 	.word	0x20000000

08003598 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af02      	add	r7, sp, #8
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2200      	movs	r2, #0
 80035ac:	2180      	movs	r1, #128	; 0x80
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f7ff ff6a 	bl	8003488 <SPI_WaitFlagStateUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d007      	beq.n	80035ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	f043 0220 	orr.w	r2, r3, #32
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e000      	b.n	80035cc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e041      	b.n	800366a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fd fd26 	bl	800104c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3304      	adds	r3, #4
 8003610:	4619      	mov	r1, r3
 8003612:	4610      	mov	r0, r2
 8003614:	f000 fbb6 	bl	8003d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b01      	cmp	r3, #1
 8003686:	d001      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e03a      	b.n	8003702 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_TIM_Base_Start_IT+0x98>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x58>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b6:	d009      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x58>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a14      	ldr	r2, [pc, #80]	; (8003710 <HAL_TIM_Base_Start_IT+0x9c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x58>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a13      	ldr	r2, [pc, #76]	; (8003714 <HAL_TIM_Base_Start_IT+0xa0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d111      	bne.n	80036f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b06      	cmp	r3, #6
 80036dc:	d010      	beq.n	8003700 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ee:	e007      	b.n	8003700 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800

08003718 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e041      	b.n	80037ae <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fd fcaa 	bl	8001098 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3304      	adds	r3, #4
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f000 fb14 	bl	8003d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d109      	bne.n	80037dc <HAL_TIM_OC_Start+0x24>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e022      	b.n	8003822 <HAL_TIM_OC_Start+0x6a>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d109      	bne.n	80037f6 <HAL_TIM_OC_Start+0x3e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	bf14      	ite	ne
 80037ee:	2301      	movne	r3, #1
 80037f0:	2300      	moveq	r3, #0
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	e015      	b.n	8003822 <HAL_TIM_OC_Start+0x6a>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d109      	bne.n	8003810 <HAL_TIM_OC_Start+0x58>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	bf14      	ite	ne
 8003808:	2301      	movne	r3, #1
 800380a:	2300      	moveq	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	e008      	b.n	8003822 <HAL_TIM_OC_Start+0x6a>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	bf14      	ite	ne
 800381c:	2301      	movne	r3, #1
 800381e:	2300      	moveq	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e05e      	b.n	80038e8 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d104      	bne.n	800383a <HAL_TIM_OC_Start+0x82>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003838:	e013      	b.n	8003862 <HAL_TIM_OC_Start+0xaa>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b04      	cmp	r3, #4
 800383e:	d104      	bne.n	800384a <HAL_TIM_OC_Start+0x92>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003848:	e00b      	b.n	8003862 <HAL_TIM_OC_Start+0xaa>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b08      	cmp	r3, #8
 800384e:	d104      	bne.n	800385a <HAL_TIM_OC_Start+0xa2>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003858:	e003      	b.n	8003862 <HAL_TIM_OC_Start+0xaa>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2202      	movs	r2, #2
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2201      	movs	r2, #1
 8003868:	6839      	ldr	r1, [r7, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fd0a 	bl	8004284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <HAL_TIM_OC_Start+0x138>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d107      	bne.n	800388a <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003888:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a18      	ldr	r2, [pc, #96]	; (80038f0 <HAL_TIM_OC_Start+0x138>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00e      	beq.n	80038b2 <HAL_TIM_OC_Start+0xfa>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389c:	d009      	beq.n	80038b2 <HAL_TIM_OC_Start+0xfa>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a14      	ldr	r2, [pc, #80]	; (80038f4 <HAL_TIM_OC_Start+0x13c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_TIM_OC_Start+0xfa>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a12      	ldr	r2, [pc, #72]	; (80038f8 <HAL_TIM_OC_Start+0x140>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d111      	bne.n	80038d6 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b06      	cmp	r3, #6
 80038c2:	d010      	beq.n	80038e6 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d4:	e007      	b.n	80038e6 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40012c00 	.word	0x40012c00
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40000800 	.word	0x40000800

080038fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b02      	cmp	r3, #2
 8003910:	d122      	bne.n	8003958 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b02      	cmp	r3, #2
 800391e:	d11b      	bne.n	8003958 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0202 	mvn.w	r2, #2
 8003928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fa05 	bl	8003d4e <HAL_TIM_IC_CaptureCallback>
 8003944:	e005      	b.n	8003952 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f9f8 	bl	8003d3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fa07 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b04      	cmp	r3, #4
 8003964:	d122      	bne.n	80039ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b04      	cmp	r3, #4
 8003972:	d11b      	bne.n	80039ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0204 	mvn.w	r2, #4
 800397c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2202      	movs	r2, #2
 8003982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f9db 	bl	8003d4e <HAL_TIM_IC_CaptureCallback>
 8003998:	e005      	b.n	80039a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f9ce 	bl	8003d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f9dd 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d122      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d11b      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0208 	mvn.w	r2, #8
 80039d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2204      	movs	r2, #4
 80039d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f9b1 	bl	8003d4e <HAL_TIM_IC_CaptureCallback>
 80039ec:	e005      	b.n	80039fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f9a4 	bl	8003d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f9b3 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0310 	and.w	r3, r3, #16
 8003a0a:	2b10      	cmp	r3, #16
 8003a0c:	d122      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	2b10      	cmp	r3, #16
 8003a1a:	d11b      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0210 	mvn.w	r2, #16
 8003a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2208      	movs	r2, #8
 8003a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f987 	bl	8003d4e <HAL_TIM_IC_CaptureCallback>
 8003a40:	e005      	b.n	8003a4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f97a 	bl	8003d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f989 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d10e      	bne.n	8003a80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d107      	bne.n	8003a80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0201 	mvn.w	r2, #1
 8003a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f955 	bl	8003d2a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8a:	2b80      	cmp	r3, #128	; 0x80
 8003a8c:	d10e      	bne.n	8003aac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a98:	2b80      	cmp	r3, #128	; 0x80
 8003a9a:	d107      	bne.n	8003aac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fc77 	bl	800439a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b40      	cmp	r3, #64	; 0x40
 8003ab8:	d10e      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	d107      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f94d 	bl	8003d72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	d10e      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d107      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0220 	mvn.w	r2, #32
 8003afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fc42 	bl	8004388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e046      	b.n	8003bb4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b0c      	cmp	r3, #12
 8003b32:	d839      	bhi.n	8003ba8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <HAL_TIM_OC_ConfigChannel+0x30>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b71 	.word	0x08003b71
 8003b40:	08003ba9 	.word	0x08003ba9
 8003b44:	08003ba9 	.word	0x08003ba9
 8003b48:	08003ba9 	.word	0x08003ba9
 8003b4c:	08003b7f 	.word	0x08003b7f
 8003b50:	08003ba9 	.word	0x08003ba9
 8003b54:	08003ba9 	.word	0x08003ba9
 8003b58:	08003ba9 	.word	0x08003ba9
 8003b5c:	08003b8d 	.word	0x08003b8d
 8003b60:	08003ba9 	.word	0x08003ba9
 8003b64:	08003ba9 	.word	0x08003ba9
 8003b68:	08003ba9 	.word	0x08003ba9
 8003b6c:	08003b9b 	.word	0x08003b9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f966 	bl	8003e48 <TIM_OC1_SetConfig>
      break;
 8003b7c:	e015      	b.n	8003baa <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 f9c5 	bl	8003f14 <TIM_OC2_SetConfig>
      break;
 8003b8a:	e00e      	b.n	8003baa <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fa28 	bl	8003fe8 <TIM_OC3_SetConfig>
      break;
 8003b98:	e007      	b.n	8003baa <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fa8b 	bl	80040bc <TIM_OC4_SetConfig>
      break;
 8003ba6:	e000      	b.n	8003baa <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003ba8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIM_ConfigClockSource+0x18>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e0a6      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x166>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bfa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b40      	cmp	r3, #64	; 0x40
 8003c0a:	d067      	beq.n	8003cdc <HAL_TIM_ConfigClockSource+0x120>
 8003c0c:	2b40      	cmp	r3, #64	; 0x40
 8003c0e:	d80b      	bhi.n	8003c28 <HAL_TIM_ConfigClockSource+0x6c>
 8003c10:	2b10      	cmp	r3, #16
 8003c12:	d073      	beq.n	8003cfc <HAL_TIM_ConfigClockSource+0x140>
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d802      	bhi.n	8003c1e <HAL_TIM_ConfigClockSource+0x62>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d06f      	beq.n	8003cfc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c1c:	e078      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d06c      	beq.n	8003cfc <HAL_TIM_ConfigClockSource+0x140>
 8003c22:	2b30      	cmp	r3, #48	; 0x30
 8003c24:	d06a      	beq.n	8003cfc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003c26:	e073      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c28:	2b70      	cmp	r3, #112	; 0x70
 8003c2a:	d00d      	beq.n	8003c48 <HAL_TIM_ConfigClockSource+0x8c>
 8003c2c:	2b70      	cmp	r3, #112	; 0x70
 8003c2e:	d804      	bhi.n	8003c3a <HAL_TIM_ConfigClockSource+0x7e>
 8003c30:	2b50      	cmp	r3, #80	; 0x50
 8003c32:	d033      	beq.n	8003c9c <HAL_TIM_ConfigClockSource+0xe0>
 8003c34:	2b60      	cmp	r3, #96	; 0x60
 8003c36:	d041      	beq.n	8003cbc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003c38:	e06a      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3e:	d066      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x152>
 8003c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c44:	d017      	beq.n	8003c76 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c46:	e063      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	6899      	ldr	r1, [r3, #8]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f000 faf5 	bl	8004246 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c6a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	609a      	str	r2, [r3, #8]
      break;
 8003c74:	e04c      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	6899      	ldr	r1, [r3, #8]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f000 fade 	bl	8004246 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c98:	609a      	str	r2, [r3, #8]
      break;
 8003c9a:	e039      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f000 fa55 	bl	8004158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2150      	movs	r1, #80	; 0x50
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 faac 	bl	8004212 <TIM_ITRx_SetConfig>
      break;
 8003cba:	e029      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	6859      	ldr	r1, [r3, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f000 fa73 	bl	80041b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2160      	movs	r1, #96	; 0x60
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fa9c 	bl	8004212 <TIM_ITRx_SetConfig>
      break;
 8003cda:	e019      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	6859      	ldr	r1, [r3, #4]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f000 fa35 	bl	8004158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2140      	movs	r1, #64	; 0x40
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fa8c 	bl	8004212 <TIM_ITRx_SetConfig>
      break;
 8003cfa:	e009      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4619      	mov	r1, r3
 8003d06:	4610      	mov	r0, r2
 8003d08:	f000 fa83 	bl	8004212 <TIM_ITRx_SetConfig>
        break;
 8003d0c:	e000      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003d0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr

08003d4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr

08003d72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr

08003d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a29      	ldr	r2, [pc, #164]	; (8003e3c <TIM_Base_SetConfig+0xb8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00b      	beq.n	8003db4 <TIM_Base_SetConfig+0x30>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da2:	d007      	beq.n	8003db4 <TIM_Base_SetConfig+0x30>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <TIM_Base_SetConfig+0xbc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d003      	beq.n	8003db4 <TIM_Base_SetConfig+0x30>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a25      	ldr	r2, [pc, #148]	; (8003e44 <TIM_Base_SetConfig+0xc0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d108      	bne.n	8003dc6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a1c      	ldr	r2, [pc, #112]	; (8003e3c <TIM_Base_SetConfig+0xb8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00b      	beq.n	8003de6 <TIM_Base_SetConfig+0x62>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d007      	beq.n	8003de6 <TIM_Base_SetConfig+0x62>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <TIM_Base_SetConfig+0xbc>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d003      	beq.n	8003de6 <TIM_Base_SetConfig+0x62>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a18      	ldr	r2, [pc, #96]	; (8003e44 <TIM_Base_SetConfig+0xc0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d108      	bne.n	8003df8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <TIM_Base_SetConfig+0xb8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d103      	bne.n	8003e2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	615a      	str	r2, [r3, #20]
}
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40000400 	.word	0x40000400
 8003e44:	40000800 	.word	0x40000800

08003e48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f023 0201 	bic.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0303 	bic.w	r3, r3, #3
 8003e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f023 0302 	bic.w	r3, r3, #2
 8003e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a1c      	ldr	r2, [pc, #112]	; (8003f10 <TIM_OC1_SetConfig+0xc8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d10c      	bne.n	8003ebe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f023 0308 	bic.w	r3, r3, #8
 8003eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f023 0304 	bic.w	r3, r3, #4
 8003ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a13      	ldr	r2, [pc, #76]	; (8003f10 <TIM_OC1_SetConfig+0xc8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d111      	bne.n	8003eea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	621a      	str	r2, [r3, #32]
}
 8003f04:	bf00      	nop
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40012c00 	.word	0x40012c00

08003f14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f023 0210 	bic.w	r2, r3, #16
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	021b      	lsls	r3, r3, #8
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f023 0320 	bic.w	r3, r3, #32
 8003f5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a1d      	ldr	r2, [pc, #116]	; (8003fe4 <TIM_OC2_SetConfig+0xd0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d10d      	bne.n	8003f90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a14      	ldr	r2, [pc, #80]	; (8003fe4 <TIM_OC2_SetConfig+0xd0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d113      	bne.n	8003fc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	621a      	str	r2, [r3, #32]
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr
 8003fe4:	40012c00 	.word	0x40012c00

08003fe8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 0303 	bic.w	r3, r3, #3
 800401e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a1d      	ldr	r2, [pc, #116]	; (80040b8 <TIM_OC3_SetConfig+0xd0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d10d      	bne.n	8004062 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800404c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a14      	ldr	r2, [pc, #80]	; (80040b8 <TIM_OC3_SetConfig+0xd0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d113      	bne.n	8004092 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	621a      	str	r2, [r3, #32]
}
 80040ac:	bf00      	nop
 80040ae:	371c      	adds	r7, #28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bc80      	pop	{r7}
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40012c00 	.word	0x40012c00

080040bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	031b      	lsls	r3, r3, #12
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a0f      	ldr	r2, [pc, #60]	; (8004154 <TIM_OC4_SetConfig+0x98>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d109      	bne.n	8004130 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004122:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	019b      	lsls	r3, r3, #6
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	621a      	str	r2, [r3, #32]
}
 800414a:	bf00      	nop
 800414c:	371c      	adds	r7, #28
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr
 8004154:	40012c00 	.word	0x40012c00

08004158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f023 0201 	bic.w	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f023 030a 	bic.w	r3, r3, #10
 8004194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr

080041b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	f023 0210 	bic.w	r2, r3, #16
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	031b      	lsls	r3, r3, #12
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	621a      	str	r2, [r3, #32]
}
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr

08004212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004212:	b480      	push	{r7}
 8004214:	b085      	sub	sp, #20
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	f043 0307 	orr.w	r3, r3, #7
 8004234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	609a      	str	r2, [r3, #8]
}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr

08004246 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004246:	b480      	push	{r7}
 8004248:	b087      	sub	sp, #28
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004260:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	021a      	lsls	r2, r3, #8
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	431a      	orrs	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4313      	orrs	r3, r2
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4313      	orrs	r3, r2
 8004272:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	609a      	str	r2, [r3, #8]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	2201      	movs	r2, #1
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	401a      	ands	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a1a      	ldr	r2, [r3, #32]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	431a      	orrs	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e046      	b.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a16      	ldr	r2, [pc, #88]	; (800437c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00e      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004330:	d009      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a12      	ldr	r2, [pc, #72]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a10      	ldr	r2, [pc, #64]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d10c      	bne.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800434c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	4313      	orrs	r3, r2
 8004356:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr
 800437c:	40012c00 	.word	0x40012c00
 8004380:	40000400 	.word	0x40000400
 8004384:	40000800 	.word	0x40000800

08004388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <__libc_init_array>:
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	2500      	movs	r5, #0
 80043b0:	4e0c      	ldr	r6, [pc, #48]	; (80043e4 <__libc_init_array+0x38>)
 80043b2:	4c0d      	ldr	r4, [pc, #52]	; (80043e8 <__libc_init_array+0x3c>)
 80043b4:	1ba4      	subs	r4, r4, r6
 80043b6:	10a4      	asrs	r4, r4, #2
 80043b8:	42a5      	cmp	r5, r4
 80043ba:	d109      	bne.n	80043d0 <__libc_init_array+0x24>
 80043bc:	f000 f822 	bl	8004404 <_init>
 80043c0:	2500      	movs	r5, #0
 80043c2:	4e0a      	ldr	r6, [pc, #40]	; (80043ec <__libc_init_array+0x40>)
 80043c4:	4c0a      	ldr	r4, [pc, #40]	; (80043f0 <__libc_init_array+0x44>)
 80043c6:	1ba4      	subs	r4, r4, r6
 80043c8:	10a4      	asrs	r4, r4, #2
 80043ca:	42a5      	cmp	r5, r4
 80043cc:	d105      	bne.n	80043da <__libc_init_array+0x2e>
 80043ce:	bd70      	pop	{r4, r5, r6, pc}
 80043d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043d4:	4798      	blx	r3
 80043d6:	3501      	adds	r5, #1
 80043d8:	e7ee      	b.n	80043b8 <__libc_init_array+0xc>
 80043da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043de:	4798      	blx	r3
 80043e0:	3501      	adds	r5, #1
 80043e2:	e7f2      	b.n	80043ca <__libc_init_array+0x1e>
 80043e4:	0800445c 	.word	0x0800445c
 80043e8:	0800445c 	.word	0x0800445c
 80043ec:	0800445c 	.word	0x0800445c
 80043f0:	08004460 	.word	0x08004460

080043f4 <memset>:
 80043f4:	4603      	mov	r3, r0
 80043f6:	4402      	add	r2, r0
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d100      	bne.n	80043fe <memset+0xa>
 80043fc:	4770      	bx	lr
 80043fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004402:	e7f9      	b.n	80043f8 <memset+0x4>

08004404 <_init>:
 8004404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004406:	bf00      	nop
 8004408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800440a:	bc08      	pop	{r3}
 800440c:	469e      	mov	lr, r3
 800440e:	4770      	bx	lr

08004410 <_fini>:
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004412:	bf00      	nop
 8004414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004416:	bc08      	pop	{r3}
 8004418:	469e      	mov	lr, r3
 800441a:	4770      	bx	lr
